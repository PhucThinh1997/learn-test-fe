{"version":3,"sources":["pages/customer/GridContactPerson.js","pages/customer/CreateCustomer.js","pages/customer/index.js","common/components/Buttons/PrimaryButton.js","common/components/Buttons/DangerButton.js","common/components/Buttons/DefaultButton.js","common/components/Buttons/ButtonCancel.js","common/components/Buttons/ButtonDelete.js","common/components/Buttons/ButtonEdit.js","utils/format.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","utils/formatDate.js","components/Grid/controllers/reducer.js","components/Grid/controllers/constants.js","../node_modules/invariant/browser.js","common/components/Buttons/ButtonToolTip.js","utils/utils.js","components/Layout/PageWrapper.js","components/Grid/controllers/selectors.js","pages/home/header-page/index.js","components/Grid/controllers/actions.js","hooks/useTable.js","components/Grid/Grid.js","utils/common/checkStore.js","utils/common/reducerInjectors.js","utils/common/injectedReducers.js","services/customer/index.js","services/employee/index.js","services/fields/index.js","pages/home/components/filter/filterCommon.js","services/customer-group/index.js","components/Loading/Loading.js"],"names":["GridContactPerson","originData","handleChangeData","rowKey","useForm","formInstance","useState","data","setData","editingKey","setEditingKey","isAdding","setAdding","useEffect","isEditing","index","onCancel","prev","slice","onSave","record","validateFields","row","newData","item","splice","push","handleAddRow","name","dateOfBirth","gender","phone","position","email","isDeleted","isNew","setFieldsValue","columnsWithEdit","title","dataIndex","editable","inputType","render","_","disabled","defaultValue","dayjs","formatDDMMYYYY","format","value","disabledDate","current","today","options","find","x","label","width","length","type","onClick","size","icon","CheckCircleOutlined","StopOutlined","getDateFormat","onEditRecord","EditOutlined","dataSource","clone","forEach","id","onDeleteRecord","DeleteOutlined","map","col","onCell","editing","rowLength","className","form","components","body","cell","EditableCell","bordered","columns","rowClassName","pagination","scroll","y","align","style","marginBottom","Text","children","config","restProps","inputNode","renderInput","Item","margin","rules","required","message","CreateOrUpdateCustomer","props","customerId","isOpen","handleClosed","reloadTable","userInfo","JSON","parse","localStorage","getItem","loading","setLoading","listEmployeeManage","setListEmployeeManage","onClose","setContactPerson","resetFields","handleGetCustomerById","useCallback","service","result","isSuccess","employeeManageId","employeeManage","getEmployeeDropDown","then","res","empRes","empOption","isAccessed","PER","PHAN_QUYEN","filter","employeeId","createCustomer","values","success","SAVE_SUCCESS","error","contactPeoples","open","footer","key","htmlType","Loading","labelCol","span","wrapperCol","layout","onFinish","updateValues","code","trim","department","taxCode","headAddress","address","hidden","allowClear","Option","customerGroup","fields","getFieldValue","Customer","isLoading","setIsLoading","dispatch","useDispatch","customerForm","setCustomerForm","setCustomerGroup","setFields","setFilter","getCustomerGroup","getCustomerGroupDropDowns","response","getFields","getFieldsDropDowns","readGrid","refresh","actions","minWidth","KHACH_HANG_SUA","onClickOpenModal","KHACH_HANG_XEM","onCreate","handleDelete","confirm","ExclamationCircleOutlined","content","okText","cancelText","onOk","deleteCustomers","DELETE_SUCCESS","DELETE_ERROR","catch","finally","handleDeleteCustomer","confirmLoading","isFilter","onFilter","isShowActionAdd","KHACH_HANG_THEM","isShowActionDelete","KHACH_HANG_XOA","onApplyFilter","PageWrapper","Grid","urlEndpoint","urlEndpointTableCustomer","PrimaryButton","DangerButton","danger","DefaultButton","ButtonCancel","ButtonDelete","rest","ButtonEdit","formatCurrency","number","Number","isNaN","Intl","NumberFormat","currency","replaceAll","formatCurrencyInput","numberString","formatDateYMD","date","myDate","moment","isMoment","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","d","isValid","formatMMDDYYYY","DateTimeToDate","dateString","Date","toISOString","split","initialState","idSelections","detailSelections","gridViewReducer","state","action","produce","draft","types","payload","SET_ITEM_ID_SELECTIONS","SET_ITEM_DETAIL_SELECTIONS","module","exports","condition","a","b","c","e","f","undefined","Error","args","argIndex","replace","framesToPop","ButtonTooltip","wrap","tip","color","mapToSelectOption","permissionsAction","permissionsList","permissions","includes","classnames","selectGridView","tableView","Search","HeaderPage","labelPrimaryBtn","onPressPrimaryBtn","isHideAction","itemSelections","useSelector","createSelector","globalState","justify","Title","level","flex","textAlign","display","flexWrap","gap","justifyContent","placeholder","onSearch","text","updateSearch","enterButton","FilterOutlined","PlusCircleOutlined","BarsOutlined","setItemIdSelections","items","setItemDetailSelections","ActionKind","currentPage","totalPage","totalElement","pageSize","searchText","sort","field","order","store","React","createContext","setState","setPage","setTotalPage","setTotalElement","setPageSize","Provider","TableProvider","initState","useReducer","page","total","val","setSearchText","setSort","withTable","WrappedComponent","ComponentWithTableProvider","expandedRowRender","handleGetDetailSelections","handleGetSelections","hasRowSelected","isHidePagination","shouldSaveToStore","shouldShowTotal","useInjectReducer","reducer","global","refreshGrid","filters","idsSelection","setIdsSelection","useContext","totalAmount","setTotalAmount","getSortItem","sorted","fieldName","isAscending","fetchData","params","pageIndex","fieldId","api","results","records","err","console","log","gridViewActions","stringify","rowSelection","selectedRowKeys","onChange","selectedRows","clsx","sorter","defaultPageSize","showSizeChanger","pageSizeOptions","showTotal","expandable","summary","summaryNumberCol","Summary","Row","Cell","checkStore","shape","isFunction","subscribe","getState","replaceReducer","runSaga","injectedReducers","isObject","injectedSagas","invariant","conformsTo","injectReducerFactory","isString","isEmpty","Reflect","has","createReducer","getInjectors","injectReducer","context","ReactReduxContext","getCustomerById","input","updateCustomer","ids","getCustomerDropdown","urlEndpointCustomer","urlEndpointTableEmployee","getEmployeeById","urlEndpointEmployee","getEmployeesByPermissions","createEmployee","updateEmployee","deleteEmployees","urlEndpointField","Filter","urlEndpointTableCustomerGroup","createCustomerGroup","updateCustomerGroup","deleteCustomerGroups","urlEndpointCustomerGroup","loadingIcon","fontSize","spin","alignItems","indicator"],"mappings":"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","file":"static/js/23.de493aef.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Table, Form, Input, InputNumber, Typography, Button, Row, Space, DatePicker, Select } from 'antd';\r\nimport { formatDDMMYYYY, today } from 'utils/formatDate';\r\nimport './GridContactPerson.less';\r\nimport { getDateFormat } from 'utils/formatDate';\r\nimport dayjs from 'dayjs';\r\nimport _ from 'lodash';\r\nimport { DeleteOutlined, EditOutlined, CheckCircleOutlined, StopOutlined } from '@ant-design/icons';\r\n\r\nconst GridContactPerson = ({ originData, rowKey = 'id', handleChangeData, ...rest }) => {\r\n  const [formInstance] = Form.useForm();\r\n  const [data, setData] = useState([]);\r\n  const [editingKey, setEditingKey] = useState('');\r\n  const [isAdding, setAdding] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (originData) {\r\n      // let dataSource = originData.filter((x) => x.isDeleted == 'False')\r\n      setData(originData);\r\n    }\r\n  }, [originData]);\r\n\r\n  const isEditing = (index) => index === editingKey;\r\n\r\n  const onEditRecord = (record, index) => {\r\n    formInstance.setFieldsValue({\r\n      ...record,\r\n      dateOfBirth: getDateFormat(record?.dateOfBirth),\r\n    });\r\n    setEditingKey(index);\r\n  };\r\n\r\n  const onCancel = () => {\r\n    if (isAdding) {\r\n      setData((prev) => prev.slice(0, -1));\r\n      setAdding(false);\r\n    } else {\r\n      setEditingKey('');\r\n    }\r\n  };\r\n\r\n  const onSave = async (index, record) => {\r\n    try {\r\n      const row = await formInstance.validateFields();\r\n      const newData = [...data];\r\n\r\n      if (index > -1) {\r\n        const item = newData[index];\r\n        newData.splice(index, 1, {\r\n          ...item,\r\n          ...row,\r\n        });\r\n        setData(newData);\r\n        setEditingKey('');\r\n        setAdding(false);\r\n        handleChangeData && handleChangeData(newData);\r\n      } else {\r\n        newData.push(row);\r\n        setData(newData);\r\n        setEditingKey('');\r\n        setAdding(false);\r\n      }\r\n      // eslint-disable-next-line no-empty\r\n    } catch (a) {}\r\n  };\r\n\r\n  const handleAddRow = () => {\r\n    const newData = {\r\n      name: '',\r\n      dateOfBirth: '',\r\n      gender: '',\r\n      phone: '',\r\n      position: '',\r\n      email: '',\r\n      isDeleted: false,\r\n      isNew: true,\r\n    };\r\n    setData([...data, newData]);\r\n    setAdding(true);\r\n    formInstance.setFieldsValue({ ...newData });\r\n  };\r\n\r\n  const onDeleteRecord = (record, index) => {\r\n    const newData = [...data];\r\n    newData.splice(index, 1);\r\n    setData(newData);\r\n\r\n    if (record.isNew) {\r\n      handleChangeData && handleChangeData(newData);\r\n    } else {\r\n      let dataSource = _.clone(data);\r\n      dataSource.forEach((x) => {\r\n        if (x.id == record.id) {\r\n          x.isDeleted = true;\r\n        }\r\n      });\r\n      handleChangeData && handleChangeData(dataSource);\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Tên',\r\n      dataIndex: 'name',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'Ngày sinh',\r\n      dataIndex: 'dateOfBirth',\r\n      inputType: 'datetime',\r\n      editable: true,\r\n      render: (_, record) => (\r\n        <DatePicker\r\n          disabled={true}\r\n          defaultValue={dayjs('22/12/2023', formatDDMMYYYY)}\r\n          format={formatDDMMYYYY}\r\n          value={record.dateOfBirth}\r\n          disabledDate={(current) => current && current > today()}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      title: 'Giới tính',\r\n      dataIndex: 'gender',\r\n      editable: true,\r\n      inputType: 'option',\r\n      render: (value) => <label> {options?.find((x) => x.value == value)?.label}</label>,\r\n    },\r\n    {\r\n      title: 'Điện thoại',\r\n      dataIndex: 'phone',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'Chức vụ',\r\n      dataIndex: 'position',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'Email',\r\n      dataIndex: 'email',\r\n      editable: true,\r\n      width: '250px',\r\n    },\r\n    {\r\n      title: '',\r\n      dataIndex: '',\r\n      width: '100px',\r\n      render: (_, record, index) => {\r\n        const editable = isEditing(index) || (isAdding && index === data.length - 1);\r\n        return editable ? (\r\n          <Space>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => onSave(index, record)}\r\n              size=\"small\"\r\n              icon={<CheckCircleOutlined />}\r\n            ></Button>\r\n            <Button type=\"danger\" onClick={onCancel} size=\"small\" icon={<StopOutlined />}></Button>\r\n          </Space>\r\n        ) : (\r\n          <Space>\r\n            <Button\r\n              type=\"default\"\r\n              disabled={editingKey !== '' || isAdding}\r\n              onClick={() => onEditRecord(record, index)}\r\n              size=\"small\"\r\n              icon={<EditOutlined />}\r\n            ></Button>\r\n            <Button\r\n              type=\"danger\"\r\n              onClick={() => onDeleteRecord(record, index)}\r\n              disabled={editingKey !== '' || isAdding}\r\n              size=\"small\"\r\n              icon={<DeleteOutlined />}\r\n            ></Button>\r\n          </Space>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  const columnsWithEdit = columns.map((col) => {\r\n    if (!col.editable) {\r\n      return col;\r\n    }\r\n    return {\r\n      ...col,\r\n      onCell: (record, index) => ({\r\n        index,\r\n        record,\r\n        inputType: col.inputType || 'text',\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        editing: isEditing(index),\r\n        isAdding: isAdding,\r\n        rowLength: data.length,\r\n      }),\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Form className=\"grid-paticipant\" form={formInstance}>\r\n      <Table\r\n        size=\"small\"\r\n        components={{\r\n          body: {\r\n            cell: EditableCell,\r\n          },\r\n        }}\r\n        bordered\r\n        dataSource={data}\r\n        columns={columnsWithEdit}\r\n        rowClassName=\"editable-row\"\r\n        pagination={false}\r\n        scroll={{ y: 200 }}\r\n        title={() => (\r\n          <Row className=\"grid-paticipant__title\" align=\"space-between\" style={{ marginBottom: '8px' }}>\r\n            <Typography.Text>Người liên hệ</Typography.Text>\r\n            <Button onClick={handleAddRow} type=\"primary\" size=\"small\">\r\n              Thêm mới\r\n            </Button>\r\n          </Row>\r\n        )}\r\n        rowKey=\"id\"\r\n      />\r\n    </Form>\r\n  );\r\n};\r\n\r\nGridContactPerson.propTypes = {};\r\nexport default GridContactPerson;\r\n\r\nconst options = [\r\n  { value: '1', label: 'Nam' },\r\n  { value: '2', label: 'Nữ' },\r\n];\r\n\r\nconst renderInput = (inputType, config) => {\r\n  switch (inputType) {\r\n    case 'number':\r\n      return <InputNumber />;\r\n    case 'datetime':\r\n      return (\r\n        <DatePicker\r\n          defaultValue={dayjs('22/12/2023', formatDDMMYYYY)}\r\n          format={formatDDMMYYYY}\r\n          disabledDate={(current) => current && current > today()}\r\n        />\r\n      );\r\n    case 'option':\r\n      return (\r\n        <Select\r\n          defaultValue=\"lucy\"\r\n          style={{ width: 120 }}\r\n          // onChange={handleChange}\r\n          options={config?.options || options}\r\n        />\r\n      );\r\n    default:\r\n      return <Input />;\r\n  }\r\n};\r\n\r\nconst EditableCell = ({\r\n  editing,\r\n  dataIndex,\r\n  title,\r\n  inputType,\r\n  record,\r\n  index,\r\n  children,\r\n  isAdding,\r\n  rowLength,\r\n  config,\r\n  ...restProps\r\n}) => {\r\n  const inputNode = renderInput(inputType, config);\r\n\r\n  return (\r\n    <td {...restProps}>\r\n      {editing || (isAdding && index === rowLength - 1) ? (\r\n        <>\r\n          <Form.Item\r\n            name={dataIndex}\r\n            style={{ margin: 0 }}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: `Nhập ${title}!`,\r\n              },\r\n            ]}\r\n          >\r\n            {inputNode}\r\n          </Form.Item>\r\n        </>\r\n      ) : (\r\n        children\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n","/* eslint-disable react/prop-types */\r\nimport { Button, Card, Col, DatePicker, Form, Input, message, Row, Select, Modal } from 'antd';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport Loading from 'components/Loading/Loading';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport * as service from 'services/customer';\r\nimport { SAVE_SUCCESS, SAVE_ERROR } from 'utils/common/messageContants';\r\nimport './style.less';\r\nimport GridContactPerson from './GridContactPerson';\r\nimport { getEmployeeDropDown } from '../../services/employee/index';\r\nimport { useSelector } from 'react-redux';\r\nimport { PER } from 'common/enum';\r\nimport { isAccessed } from 'utils/utils';\r\n\r\nconst CreateOrUpdateCustomer = (props) => {\r\n  const { customerId, isOpen, handleClosed, title, reloadTable } = props;\r\n  const userInfo = JSON.parse(localStorage.getItem('userInfo'))\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const [listEmployeeManage, setListEmployeeManage] = useState([]);\r\n\r\n  const onClose = () => {\r\n    setContactPerson([]);\r\n    form.resetFields();\r\n    handleClosed();\r\n  };\r\n\r\n  const handleGetCustomerById = useCallback(async () => {\r\n    setLoading(true);\r\n    const result = await service.getCustomerById(customerId);\r\n    if (result.isSuccess) {\r\n      result.data.employeeManageId = result.data?.employeeManage?.id;\r\n      form.setFieldsValue(result.data);\r\n    }\r\n    setLoading(false);\r\n  }, [form, customerId]);\r\n\r\n  const getEmployeeManager = () => {\r\n\r\n    getEmployeeDropDown().then((res) => {\r\n      let empRes = res.data\r\n      let empOption = []\r\n      if (isAccessed(PER.PHAN_QUYEN)) {\r\n        empOption = empRes\r\n      }\r\n      else {\r\n        empOption = empRes.filter(x => x.id === userInfo.employeeId).map((x) => ({\r\n          id: x.id,\r\n          name: x.name,\r\n        }));\r\n      }\r\n      setListEmployeeManage(empOption);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (customerId) {\r\n      handleGetCustomerById();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [customerId]);\r\n\r\n  useEffect(() => {\r\n    getEmployeeManager();\r\n  }, []);\r\n\r\n  const onFinish = (values) => {\r\n    const updateValues = {\r\n      ...values,\r\n      code: values.code?.trim(),\r\n      name: values.name?.trim(),\r\n      department: values.department?.trim(),\r\n      phone: values.phone?.trim(),\r\n      email: values.email?.trim(),\r\n      taxCode: values.taxCode?.trim(),\r\n      position: values.position?.trim(),\r\n      headAddress: values.headAddress?.trim(),\r\n      address: values.address?.trim(),\r\n      employeeManageId: values.employeeManageId,\r\n    };\r\n    createCustomer(updateValues);\r\n  };\r\n\r\n  const createCustomer = async (values) => {\r\n    const data = await service.createCustomer(values);\r\n    if (data.isSuccess) {\r\n      setContactPerson([]);\r\n      form.resetFields();\r\n      handleClosed();\r\n      reloadTable();\r\n      message.success(SAVE_SUCCESS);\r\n    } else {\r\n      handleClosed();\r\n      reloadTable();\r\n      message.error(data.message);\r\n    }\r\n  };\r\n  const setContactPerson = (values) => {\r\n    form.setFieldsValue({\r\n      contactPeoples: values,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title={title}\r\n      open={isOpen}\r\n      onCancel={onClose}\r\n      width={1000}\r\n      footer={[\r\n        <Button type=\"default\" form=\"formCreateUpdateCustomer\" key=\"back\" onClick={onClose}>\r\n          Hủy\r\n        </Button>,\r\n        <Button form=\"formCreateUpdateCustomer\" key=\"submit\" type=\"primary\" htmlType=\"submit\">\r\n          Lưu\r\n        </Button>,\r\n      ]}\r\n    >\r\n      {loading ? (\r\n        <Loading />\r\n      ) : (\r\n        <Form\r\n          id=\"formCreateUpdateCustomer\"\r\n          labelCol={{ span: 14 }}\r\n          wrapperCol={{ span: 24 }}\r\n          form={form}\r\n          layout=\"vertical\"\r\n          onFinish={onFinish}\r\n        >\r\n          <Row>\r\n            <Col span={24}>\r\n              <Row>\r\n                <Col span={8}>\r\n                  <Form.Item hidden={true} label=\"id\" name=\"id\" />\r\n                  <Form.Item\r\n                    label=\"Mã khách hàng\"\r\n                    name=\"code\"\r\n                    rules={[{ required: true, message: 'Mã khách hàng không được bỏ trống!' }]}\r\n                  >\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={16}>\r\n                  <Form.Item\r\n                    label=\"Tên khách hàng\"\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Tên khách hàng không được bỏ trống.' }]}\r\n                  >\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={8}>\r\n                  <Form.Item label=\"Số điện thoại\" name=\"phone\">\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n                  <Form.Item\r\n                    label=\"Người quản lý\"\r\n                    name=\"employeeManageId\"\r\n                    rules={[{ required: true, message: 'Người quản không được bỏ trống.!' }]}\r\n                  >\r\n                    <Select allowClear>\r\n                      {listEmployeeManage &&\r\n                        listEmployeeManage.map((item) => (\r\n                          <Select.Option key={item.id} values={item.id}>\r\n                            {item.name}\r\n                          </Select.Option>\r\n                        ))}\r\n                    </Select>\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n                  <Form.Item\r\n                    label=\"Nhóm khách hàng\"\r\n                    name=\"customerGroupId\"\r\n                    rules={[{ required: true, message: 'Nhóm khách hàng không được bỏ trống!' }]}\r\n                  >\r\n                    <Select allowClear>\r\n                      {props.customerGroup &&\r\n                        props.customerGroup.map((item) => (\r\n                          <Select.Option key={item.id} values={item.id}>\r\n                            {item.name}\r\n                          </Select.Option>\r\n                        ))}\r\n                    </Select>\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={8}>\r\n                  <Form.Item label=\"Email\" name=\"email\">\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n                  <Form.Item\r\n                    label=\"Mã số thuế\"\r\n                    name=\"taxCode\"\r\n                    rules={[{ required: true, message: 'Mã số thuế không được bỏ trống!' }]}\r\n                  >\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n                  <Form.Item\r\n                    label=\"Lĩnh vực\"\r\n                    name=\"fieldId\"\r\n                    rules={[{ required: true, message: 'Lĩnh vực không được bỏ trống!' }]}\r\n                  >\r\n                    <Select allowClear>\r\n                      {props.fields &&\r\n                        props.fields.map((item) => (\r\n                          <Select.Option key={item.id} values={item.id}>\r\n                            {item.name}\r\n                          </Select.Option>\r\n                        ))}\r\n                    </Select>\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={8}>\r\n                  <Form.Item label=\"Người đại diện\" name=\"department\">\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n                  <Form.Item label=\"Chức vụ\" name=\"position\">\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n                  <Form.Item label=\"Điện thoại di động\" name=\"phoneNumber\">\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={24} className=\"custom-width\">\r\n                  <Form.Item label=\"Địa chỉ kinh doanh\" name=\"headAddress\">\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={24} className=\"custom-width\">\r\n                  <Form.Item label=\"Địa chỉ văn phòng/sản xuất\" name=\"address\">\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={24} className=\"custom-width\">\r\n                  <Form.Item name=\"contactPeoples\">\r\n                    <GridContactPerson\r\n                      originData={form.getFieldValue('contactPeoples') || []}\r\n                      handleChangeData={setContactPerson}\r\n                      rowKey=\"id\"\r\n                    />\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      )}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nCreateOrUpdateCustomer.propTypes = {};\r\n\r\nexport default CreateOrUpdateCustomer;\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport { Modal, Form, message } from 'antd';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { ButtonEdit } from 'common/components/Buttons';\r\nimport Grid from 'components/Grid';\r\nimport HeaderPage from 'pages/home/header-page';\r\nimport PageWrapper from 'components/Layout/PageWrapper';\r\n\r\nimport { DELETE_ERROR, DELETE_SUCCESS, SAVE_SUCCESS } from 'utils/common/messageContants';\r\nimport { urlEndpointTableCustomer } from 'services/customer/';\r\nimport { updateCustomer, createCustomer, deleteCustomers } from 'services/customer/';\r\nimport { getCustomerGroupDropDowns } from 'services/customer-group/';\r\nimport { getFieldsDropDowns } from 'services/fields/';\r\nimport * as actions from 'redux/global/actions';\r\nimport CreateOrUpdateCustomer from './CreateCustomer';\r\nimport Filter from 'pages/home/components/filter/filterCommon';\r\nimport { isAccessed } from 'utils/utils';\r\nimport { PER } from 'common/enum';\r\n\r\nconst Customer = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const [form] = Form.useForm();\r\n  const [customerForm, setCustomerForm] = useState({\r\n    customerId: '',\r\n    isOpen: false,\r\n  });\r\n  const [customerGroup, setCustomerGroup] = useState([]);\r\n  const [fields, setFields] = useState([]);\r\n  const [filter, setFilter] = useState({\r\n    isOpen: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getCustomerGroup();\r\n  }, [customerForm.isOpen]);\r\n\r\n  const getCustomerGroup = async () => {\r\n    const response = await getCustomerGroupDropDowns();\r\n    setCustomerGroup(response?.data || []);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getFields();\r\n  }, [customerForm.isOpen]);\r\n\r\n  const getFields = async () => {\r\n    const response = await getFieldsDropDowns();\r\n    setFields(response?.data || []);\r\n  };\r\n\r\n  const readGrid = (refresh) => {\r\n    dispatch(actions.refreshGrid(refresh));\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Mã khách hàng',\r\n      dataIndex: 'code',\r\n      minWidth: '150px',\r\n    },\r\n    {\r\n      title: 'Tên khách hàng',\r\n      dataIndex: 'name',\r\n      minWidth: '350px',\r\n    },\r\n    {\r\n      title: 'Mã số thuế',\r\n      dataIndex: 'taxCode',\r\n      minWidth: '170px',\r\n    },\r\n    {\r\n      title: 'Người quản lý',\r\n      dataIndex: ['employeeManage', 'name'],\r\n      minWidth: '200px',\r\n    },\r\n    {\r\n      title: 'Lĩnh vực',\r\n      dataIndex: ['field', 'name'],\r\n      width: '150px',\r\n    },\r\n    {\r\n      title: 'Địa chỉ',\r\n      dataIndex: 'headAddress',\r\n      minWidth: '200px',\r\n    },\r\n    {\r\n      title: '',\r\n      dataIndex: 'action',\r\n      width: '30px',\r\n      render: (_, values) => <ButtonEdit disabled={!isAccessed(PER.KHACH_HANG_SUA)} onClick={() => onClickOpenModal(values, 'Chỉnh sửa khách hàng')} />,\r\n    },\r\n  ];\r\n\r\n  const handleCancel = () => {\r\n    form.resetFields();\r\n    setCustomerForm({ isOpen: false });\r\n  };\r\n\r\n  const finishAction = () => {\r\n    handleCancel();\r\n    readGrid(true);\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    // Remove spaces on first or last string\r\n    let updateValue = {\r\n      code: values?.code?.trim(),\r\n      name: values?.name?.trim(),\r\n    };\r\n    if (values.id) {\r\n      updateValue = { ...updateValue, id: values?.id };\r\n      handleUpdateCustomer(updateValue);\r\n    } else {\r\n      handleCreateCustomer(updateValue);\r\n    }\r\n  };\r\n  const handleCreateCustomer = async (values) => {\r\n    setIsLoading(true);\r\n    const result = await createCustomer(values);\r\n    if (result && result.isSuccess) {\r\n      finishAction();\r\n      message.success(SAVE_SUCCESS);\r\n    } else {\r\n      message.error(result.message);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n  const handleUpdateCustomer = async (values) => {\r\n    setIsLoading(true);\r\n    let res = await updateCustomer(values);\r\n    if (res.isSuccess) {\r\n      finishAction();\r\n      message.success(SAVE_SUCCESS);\r\n    } else {\r\n      message.error(res.message);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n  const handleDeleteCustomer = (values) => {\r\n    setIsLoading(true);\r\n\r\n    deleteCustomers(values)\r\n      .then((res) => {\r\n        if (res.isSuccess) {\r\n          message.success(DELETE_SUCCESS);\r\n          readGrid(true);\r\n        } else {\r\n          message.error(DELETE_ERROR);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        message.error(DELETE_ERROR);\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(true);\r\n      });\r\n  };\r\n  //   const onClickOpenModal = (record = {}, title) => {\r\n  //     form.setFieldsValue(record);\r\n  //     setTitle(title);\r\n  //     setIsopen(true);\r\n  //   };\r\n\r\n  const onClickOpenModal = useCallback((record = {}) => {\r\n    setCustomerForm({\r\n      customerId: record.id,\r\n      isOpen: true,\r\n    });\r\n  }, []);\r\n\r\n  const onClickDelete = (values) => {\r\n    Modal.confirm({\r\n      title: 'Xác Nhận',\r\n      icon: <ExclamationCircleOutlined />,\r\n      content: 'Bạn có chắc chắn muốn xóa dòng dữ liệu đã chọn?',\r\n      okText: 'Xác Nhận',\r\n      cancelText: 'Hủy',\r\n      onOk: () => handleDeleteCustomer(values),\r\n      confirmLoading: isLoading,\r\n    });\r\n  };\r\n\r\n  const renderFilter = () => (\r\n    <Filter\r\n      isOpen={filter.isOpen}\r\n      title={'Lọc khách hàng'}\r\n      handleClosed={() => setFilter({ isOpen: false })}\r\n      onApplyFilter={(values) => {\r\n        dispatch(actions.filters(values));\r\n      }}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {isAccessed(PER.KHACH_HANG_XEM) && (\r\n        <div>\r\n          <HeaderPage\r\n            title=\"KHÁCH HÀNG\"\r\n            actions=\"default\"\r\n            onCreate={() => onClickOpenModal({}, 'Thêm mới khách hàng')}\r\n            handleDelete={onClickDelete}\r\n            isFilter\r\n            onFilter={() => setFilter({ isOpen: true })}\r\n            isShowActionAdd={isAccessed(PER.KHACH_HANG_THEM)}\r\n            isShowActionDelete={isAccessed(PER.KHACH_HANG_XOA)}\r\n          />\r\n          {renderFilter()}\r\n          <div className=\"main__application\">\r\n            <PageWrapper>\r\n              <Grid urlEndpoint={urlEndpointTableCustomer} columns={columns} />\r\n            </PageWrapper>\r\n          </div>\r\n          <CreateOrUpdateCustomer\r\n            isOpen={customerForm.isOpen}\r\n            handleClosed={() => setCustomerForm({ isOpen: false, customerId: null })}\r\n            title={'Thông tin'}\r\n            reloadTable={() => readGrid(true)}\r\n            customerId={customerForm.customerId}\r\n            customerGroup={customerGroup}\r\n            fields={fields}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Customer;\r\n","import React from 'react';\r\nimport { Button } from 'antd';\r\nfunction PrimaryButton(props) {\r\n  return <Button type=\"primary\" size=\"small\" {...props} />;\r\n}\r\n\r\nPrimaryButton.propTypes = {};\r\n\r\nexport default PrimaryButton;\r\n","import React from 'react';\r\nimport { Button } from 'antd';\r\nfunction DangerButton(props) {\r\n  return <Button danger size=\"small\" {...props} />;\r\n}\r\n\r\nDangerButton.propTypes = {};\r\n\r\nexport default DangerButton;\r\n","import React from 'react';\r\nimport { Button } from 'antd';\r\nfunction DefaultButton(props) {\r\n  return <Button type=\"default\" size=\"small\" {...props} />;\r\n}\r\n\r\nDefaultButton.propTypes = {};\r\n\r\nexport default DefaultButton;\r\n","import React from 'react';\r\nimport DefaultButton from './PrimaryButton';\r\nimport { StopOutlined } from '@ant-design/icons';\r\n\r\nfunction ButtonCancel({ title = 'Thêm mới', ...rest }) {\r\n  return (\r\n    <DefaultButton icon={<StopOutlined />} {...rest}>\r\n      {title}\r\n    </DefaultButton>\r\n  );\r\n}\r\n\r\nButtonCancel.propTypes = {};\r\n\r\nexport default ButtonCancel;\r\n","import React from 'react';\r\nimport DangerButton from './DangerButton';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\n\r\nfunction ButtonDelete({ title = '', ...rest }) {\r\n  return (\r\n    <DangerButton icon={<DeleteOutlined />} {...rest}>\r\n      {title}\r\n    </DangerButton>\r\n  );\r\n}\r\n\r\nButtonDelete.propTypes = {};\r\n\r\nexport default ButtonDelete;\r\n","import React from 'react';\r\nimport { EditOutlined } from '@ant-design/icons';\r\nimport DefaultButton from './DefaultButton';\r\n\r\nfunction ButtonEdit({ title = '', ...rest }) {\r\n  return (\r\n    <DefaultButton icon={<EditOutlined />} {...rest}>\r\n      {title}\r\n    </DefaultButton>\r\n  );\r\n}\r\n\r\nButtonEdit.propTypes = {};\r\n\r\nexport default ButtonEdit;\r\n","import moment from \"moment\";\r\n\r\nexport const formatCurrency = (number) => {\r\n  if (Number.isNaN(number) || !number || number === null) {\r\n    number = 0;\r\n  }\r\n  let vnd = new Intl.NumberFormat('vi-VN', {\r\n    style: 'currency',\r\n    currency: 'VND',\r\n  });\r\n  return vnd.format(number).replaceAll('₫', '');\r\n};\r\n\r\nexport const formatCurrencyInput = (numberString) => {\r\n  let number = numberString.replaceAll('.', '');\r\n  return Number(number);\r\n};\r\n\r\nexport const formatDateYMD = (date) => {\r\n  let myDate = moment(date);\r\n  return moment.isMoment(myDate) ? myDate?.format('YYYY-MM-DD') : myDate\r\n}\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import moment from 'moment';\r\n\r\nexport const formatMDY = (data) => (data ? window.moment.utc(data).local().format('MM/DD/YYYY') : '');\r\n\r\nexport const customFormat = (data, format) => {\r\n  const date = window.moment.utc(data).local();\r\n  return date.isValid() ? date.format(format) : '';\r\n};\r\n\r\nexport const getDateFormat = (date) => {\r\n  const d = moment(date);\r\n  return date && d.isValid() ? d : '';\r\n};\r\n\r\nexport const startDMY = (data, type) => moment(data).startOf(type).toString();\r\n\r\nexport const endDMY = (data, type) => moment(data).endOf(type).toString();\r\n\r\nexport const formatMDYWithParam = (param) => (param && param.value ? formatMDY(param.value) : '');\r\nexport const formatMMDDYYYY = (data) => (data ? moment(data).format('MM/DD/YYYY') : '');\r\nexport const formatDDMMYYYY = (data) => (data ? moment(data).format('DD/MM/YYYY') : '');\r\n\r\nexport const formatTime = (data) => (data ? moment(data).format('HH:mm A') : '');\r\n\r\nexport const formatFullTime = (data) => (data ? moment(data).format('MM/DD/YYYY hh:mm A') : '');\r\n\r\nexport const exportToChatTime = (isoDate) => {\r\n  if (!isoDate) return;\r\n  const diff = moment(isoDate).diff(new Date(), 'hours');\r\n\r\n  let result;\r\n\r\n  if (-diff < 10) {\r\n    result = window.moment(isoDate).fromNow();\r\n  }\r\n\r\n  if (-diff >= 10) {\r\n    result = window.moment(isoDate).calendar();\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const formattedFullTime = (data) => moment(data).format('YYYY-MM-DDTHH:mm:ss[Z]');\r\n\r\nexport const startISOTime = (data, typeView) => moment(data).startOf(typeView).toISOString();\r\n\r\nexport const endISOTime = (data, typeView) => moment(data).endOf(typeView).toISOString();\r\n\r\nexport const convertToISOTime = (data) => moment(data).toISOString();\r\n\r\nexport const getPreviousDays = (number) => moment().subtract(number, 'days');\r\nexport const getPrevious30Days = () => getPreviousDays(30);\r\n\r\nexport const today = () => moment();\r\n\r\n\r\nexport const DateTimeToDate = (dateString) => {\r\n  if (!dateString) return null\r\n\r\n  const date = new Date(dateString);\r\n  const formattedDate = date.toISOString().split('T')[0];\r\n  return formattedDate\r\n}\r\n\r\n","import produce from 'immer';\r\nimport * as types from './constants';\r\n\r\n// initial state\r\nexport const initialState = {\r\n  idSelections: [],\r\n  detailSelections: [],\r\n};\r\n\r\nconst gridViewReducer = (state = initialState, action) =>\r\n  produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case types.SET_ITEM_ID_SELECTIONS:\r\n        draft.idSelections = action.payload;\r\n        break;\r\n      case types.SET_ITEM_DETAIL_SELECTIONS:\r\n        draft.detailSelections = action.payload;\r\n        break;\r\n    }\r\n  });\r\n\r\nexport default gridViewReducer;\r\n","export const SET_ITEM_ID_SELECTIONS = 'SET_ITEM_ID_SELECTIONS';\r\nexport const SET_ITEM_DETAIL_SELECTIONS = 'SET_ITEM_DETAIL_SELECTIONS';\r\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","import { Button, Divider, Space, Tooltip } from 'antd';\r\nimport React from 'react';\r\nconst ButtonTooltip = (props) => (\r\n  <>\r\n    <Space wrap>\r\n      <Tooltip title={props?.tip} color=\"blue\" key=\"blue\">\r\n        {props.children}\r\n      </Tooltip>\r\n    </Space>\r\n  </>\r\n);\r\nexport default ButtonTooltip;\r\n\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import { Button } from 'antd';\r\n\r\n// function ButtonToolTip(props) {\r\n//   return <Button type=\"primary\" size=\"small\" {...props} />;\r\n// }\r\n\r\n// ButtonToolTip.propTypes = {};\r\n\r\n// export default ButtonToolTip;\r\n","export const mapToSelectOption = (data) => {\r\n  const options = data.map((x) => {\r\n    return {\r\n      value: x.id,\r\n      label: x.name,\r\n    };\r\n  });\r\n  return options\r\n};\r\n\r\nexport const isAccessed = (permissionsAction) => {\r\n  if (!permissionsAction) return\r\n\r\n  const userInfo = JSON.parse(localStorage.getItem('userInfo'))\r\n  const permissionsList = userInfo.permissions\r\n  if (permissionsList && permissionsList.length > 0) {\r\n    return permissionsList.includes(permissionsAction)\r\n  }\r\n\r\n  return false\r\n}\r\n","import React from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport './PageWrapper.less';\r\n\r\nfunction PageWrapper({ className, children, ...rest }) {\r\n  return (\r\n    <div className={classnames('section-wrapper', className)} {...rest}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nPageWrapper.propTypes = {};\r\n\r\nexport default PageWrapper;\r\n","import { createSelector } from 'reselect';\r\nimport { initialState } from './reducer';\r\n\r\nconst selectGridView = (state) => (state && state.tableView) || initialState;\r\n\r\nconst selectGridIdSelections = () => createSelector(selectGridView, (globalState) => globalState.idSelections);\r\n\r\nconst selectGridDetailSelections = () => createSelector(selectGridView, (globalState) => globalState.detailSelections);\r\n\r\nexport { selectGridView, selectGridIdSelections, selectGridDetailSelections };\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, Input, Button, Typography } from 'antd';\r\nimport { PlusCircleOutlined, BarsOutlined, FilterOutlined } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ButtonDelete, PrimaryButton } from 'common/components/Buttons';\r\n\r\nimport * as gridViewSelectors from 'components/Grid/controllers/selectors';\r\nimport { updateSearch } from 'redux/global/actions';\r\nimport './header.less';\r\n\r\nconst { Search } = Input;\r\n\r\nconst HeaderPage = ({\r\n  title = '',\r\n  actions = 'default',\r\n  onCreate,\r\n  handleDelete,\r\n  labelPrimaryBtn = \"\",\r\n  onPressPrimaryBtn = () => { },\r\n  isFilter = false,\r\n  onFilter,\r\n  isHideAction = false,\r\n  isShowActionDelete = true,\r\n  isShowActionAdd = true,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const itemSelections = useSelector(gridViewSelectors.selectGridIdSelections());\r\n\r\n  const onSearch = (text) => {\r\n    dispatch(updateSearch(text));\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"header-page\">\r\n      <Row className=\"wrapper\" justify=\"space-around\" align=\"center\">\r\n        <Col className=\"header-page__title\">\r\n          <Typography.Title level={3}>{title}</Typography.Title>\r\n        </Col>\r\n        <Col flex={1} style={{ textAlign: 'right' }}>\r\n          {actions === 'default' ? (\r\n            <Row\r\n              style={{\r\n                display: 'flex',\r\n                flexWrap: 'nowrap',\r\n                gap: '16px',\r\n                justifyContent: 'end',\r\n              }}\r\n            >\r\n              <Search className=\"header-page__search\" placeholder=\"Tìm kiếm...\" onSearch={onSearch} enterButton />\r\n              {isFilter &&\r\n                (<Button type=\"primary\" onClick={() => onFilter()} icon={<FilterOutlined />}>\r\n                </Button>)\r\n              }\r\n              {isHideAction === false && (\r\n                <>\r\n                  {isShowActionAdd && (\r\n                    <Button type=\"primary\" onClick={() => onCreate()} icon={<PlusCircleOutlined />}>\r\n                      Thêm mới\r\n                    </Button>\r\n                  )}\r\n                  {!!labelPrimaryBtn && <PrimaryButton size=\"medium\" icon={<BarsOutlined />} onClick={onPressPrimaryBtn}>\r\n                    {labelPrimaryBtn}\r\n                  </PrimaryButton>}\r\n                  {isShowActionDelete && (\r\n                    <ButtonDelete\r\n                      size=\"medium\"\r\n                      onClick={() => handleDelete && handleDelete(itemSelections)}\r\n                      disabled={!itemSelections.length}\r\n                    >\r\n                      Xóa\r\n                    </ButtonDelete>\r\n                  )}\r\n                </>\r\n              )}\r\n            </Row>\r\n          ) : typeof actions === 'function' ? (\r\n            actions()\r\n          ) : null}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeaderPage.propTypes = {\r\n  title: PropTypes.string,\r\n  actions: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.bool]),\r\n  onCreate: PropTypes.func,\r\n  handleDelete: PropTypes.func,\r\n  labelPrimaryBtn: PropTypes.string,\r\n  onPressPrimaryBtn: PropTypes.func,\r\n};\r\n\r\nexport default HeaderPage;\r\n","import * as types from './constants';\r\n\r\nexport function setItemIdSelections(items) {\r\n  return {\r\n    type: types.SET_ITEM_ID_SELECTIONS,\r\n    payload: items,\r\n  };\r\n}\r\nexport function setItemDetailSelections(items) {\r\n  return {\r\n    type: types.SET_ITEM_DETAIL_SELECTIONS,\r\n    payload: items,\r\n  };\r\n}\r\n","import React, { useContext, useReducer, useCallback } from 'react';\r\n\r\nconst ActionKind = {\r\n  SET_STATE: 'SET_STATE',\r\n  SET_DATA: 'SET_DATA',\r\n  SET_PAGE: 'SET_PAGE',\r\n  SET_TOTAL_PAGE: 'SET_TOTAL_PAGE',\r\n  SET_TOTAL_ELEMENT: 'SET_TOTAL_ELEMENT',\r\n  SET_LOADING: 'SET_LOADING',\r\n  SET_PAGESIZE: 'SET_PAGESIZE',\r\n  SET_SORT: 'SET_SORT',\r\n  SET_SEARCH_TEXT: 'SET_SEARCH_TEXT',\r\n};\r\n\r\nexport const initialState = {\r\n  data: [],\r\n  currentPage: 1,\r\n  totalPage: 1,\r\n  totalElement: 0,\r\n  pageSize: 10,\r\n  loading: false,\r\n  searchText: '',\r\n  sort: [\r\n    {\r\n      field: '',\r\n      order: '',\r\n    },\r\n  ],\r\n};\r\n\r\nconst store = React.createContext({\r\n  state: initialState,\r\n  setState: () => null,\r\n  setPage: () => null,\r\n  setTotalPage: () => null,\r\n  setData: () => null,\r\n  setTotalElement: () => null,\r\n  setLoading: () => null,\r\n  setPageSize: () => null,\r\n});\r\n\r\nconst { Provider } = store;\r\n\r\nconst TableProvider = ({ children, initState }) => {\r\n  const [state, dispatch] = useReducer(\r\n    (state, action) => {\r\n      switch (action.type) {\r\n        case ActionKind.SET_STATE:\r\n          return {\r\n            ...state,\r\n            ...action.payload,\r\n          };\r\n        case ActionKind.SET_DATA:\r\n          return {\r\n            ...state,\r\n            data: action.payload.data,\r\n          };\r\n        case ActionKind.SET_PAGE:\r\n          return {\r\n            ...state,\r\n            currentPage: action.payload.currentPage,\r\n          };\r\n        case ActionKind.SET_TOTAL_PAGE:\r\n          return {\r\n            ...state,\r\n            totalPage: action.payload.totalPage,\r\n          };\r\n        case ActionKind.SET_TOTAL_ELEMENT:\r\n          return {\r\n            ...state,\r\n            totalElement: action.payload.totalElement,\r\n          };\r\n        case ActionKind.SET_LOADING:\r\n          return {\r\n            ...state,\r\n            loading: action.payload.loading,\r\n          };\r\n        case ActionKind.SET_PAGESIZE:\r\n          return {\r\n            ...state,\r\n            pageSize: action.payload.pageSize,\r\n          };\r\n        case ActionKind.SET_SEARCH_TEXT:\r\n          return {\r\n            ...state,\r\n            searchText: action.payload.searchText,\r\n          };\r\n        case ActionKind.SET_SORT:\r\n          return {\r\n            ...state,\r\n            sort: action.payload.sort,\r\n          };\r\n        default:\r\n          return { ...state };\r\n      }\r\n    },\r\n    { ...initialState, ...initState },\r\n  );\r\n\r\n  const setState = useCallback((state) => {\r\n    dispatch({\r\n      type: ActionKind.SET_STATE,\r\n      payload: state,\r\n    });\r\n  }, []);\r\n\r\n  const setPage = useCallback((page) => {\r\n    dispatch({\r\n      type: ActionKind.SET_PAGE,\r\n      payload: {\r\n        currentPage: page,\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  const setData = useCallback((data) => {\r\n    dispatch({\r\n      type: ActionKind.SET_DATA,\r\n      payload: {\r\n        data: data,\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  const setTotalPage = useCallback((total) => {\r\n    dispatch({\r\n      type: ActionKind.SET_TOTAL_PAGE,\r\n      payload: {\r\n        totalPage: total,\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  const setLoading = useCallback((val) => {\r\n    dispatch({\r\n      type: ActionKind.SET_LOADING,\r\n      payload: {\r\n        loading: val,\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  const setTotalElement = useCallback((total) => {\r\n    dispatch({\r\n      type: ActionKind.SET_TOTAL_ELEMENT,\r\n      payload: {\r\n        totalElement: total,\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  const setPageSize = useCallback((size) => {\r\n    dispatch({\r\n      type: ActionKind.SET_PAGESIZE,\r\n      payload: {\r\n        pageSize: size,\r\n      },\r\n    });\r\n  }, []);\r\n  const setSearchText = useCallback((searchText) => {\r\n    dispatch({\r\n      type: ActionKind.SET_SEARCH_TEXT,\r\n      payload: {\r\n        searchText: searchText,\r\n      },\r\n    });\r\n  }, []);\r\n  const setSort = useCallback((sort) => {\r\n    dispatch({\r\n      type: ActionKind.SET_SORT,\r\n      payload: {\r\n        sort: sort,\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Provider\r\n      value={{\r\n        state,\r\n        setState,\r\n        setPage,\r\n        setTotalPage,\r\n        setData,\r\n        setLoading,\r\n        setTotalElement,\r\n        setPageSize,\r\n        setSearchText,\r\n        setSort,\r\n      }}\r\n    >\r\n      {children}\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default TableProvider;\r\n\r\n// HOC to wrap component with TableProvider\r\nexport function withTable(WrappedComponent, initState = initialState) {\r\n  const ComponentWithTableProvider = (props) => (\r\n    <TableProvider initState={initState}>\r\n      <WrappedComponent {...props} />\r\n    </TableProvider>\r\n  );\r\n  return ComponentWithTableProvider;\r\n}\r\n\r\nexport const useTable = () => useContext(store);\r\n","import React, { useEffect, useCallback, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Table } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport clsx from 'classnames';\r\nimport { isArray } from 'lodash';\r\n\r\nimport * as api from 'config/axios';\r\nimport * as actions from 'redux/global/actions';\r\nimport reducer from './controllers/reducer';\r\n// import saga from './controllers/saga';\r\nimport * as gridViewActions from './controllers/actions';\r\nimport { useInjectReducer } from 'utils/common/injectedReducers';\r\n// import { useInjectSaga } from 'utils/common/injectSaga';\r\nimport { useTable, withTable } from 'hooks/useTable';\r\n\r\nimport './Grid.less';\r\nimport { formatCurrency } from 'utils/format';\r\n\r\nconst key = 'tableView';\r\n\r\nconst Grid = ({\r\n  className = '',\r\n  columns,\r\n  data,\r\n  expandedRowRender,\r\n  handleGetDetailSelections,\r\n  handleGetSelections,\r\n  hasRowSelected = true,\r\n  isHidePagination,\r\n  rowKey = 'id',\r\n  shouldSaveToStore = true,\r\n  shouldShowTotal = true,\r\n  urlEndpoint,\r\n  pageSize,\r\n  ...rest\r\n}) => {\r\n  useInjectReducer({ key, reducer });\r\n  // useInjectSaga({ key, saga });\r\n\r\n  const dispatch = useDispatch();\r\n  const searchText = useSelector((state) => state.global.searchText);\r\n  const readGrid = useSelector((state) => state.global.refreshGrid);\r\n  const filters = useSelector((state) => state.global.filters);\r\n\r\n  const [idsSelection, setIdsSelection] = useState([]);\r\n  const { state, setState, setLoading, setData } = useTable();\r\n  const [totalAmount, setTotalAmount] = useState('');\r\n\r\n  const resetState = () => {\r\n    dispatch(actions.refreshGrid(false));\r\n  };\r\n\r\n  const getSortItem = (sort) => {\r\n    let sorted = [];\r\n    sort.map((item) => {\r\n      if (item?.field) {\r\n        sorted.push({\r\n          fieldName: item.field,\r\n          isAscending: item.order === 'ascend',\r\n        });\r\n      }\r\n    });\r\n\r\n    return sorted;\r\n  };\r\n\r\n  const fetchData = useCallback(() => {\r\n    if (!urlEndpoint) return;\r\n    setLoading(true);\r\n\r\n    const params = {\r\n      pageSize: state.pageSize,\r\n      pageIndex: state.currentPage - 1,\r\n      searchText: state.searchText,\r\n      sort: getSortItem(state.sort),\r\n      fieldId: filters?.fields,\r\n      filter: [],\r\n    };\r\n\r\n    api\r\n      .sendGet(urlEndpoint, params)\r\n      .then((results) => {\r\n        if (results && results?.isSuccess) {\r\n          const data = results?.data || {};\r\n          setState({\r\n            data: data?.records,\r\n            currentPage: params?.pageIndex || 1,\r\n            totalElement: data?.total || 0,\r\n            loading: false,\r\n          });\r\n          setTotalAmount(results?.data?.totalAmount);\r\n        } else {\r\n          setState({\r\n            data: [],\r\n            totalElement: 0,\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        // eslint-disable-next-line no-console\r\n        console.log('err: ', err);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [state.pageSize, state.sort, state.searchText, urlEndpoint, filters?.fields]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [dispatch, fetchData]);\r\n\r\n  useEffect(() => {\r\n    console.log('filtersfilters', filters);\r\n  }, [filters]);\r\n\r\n  useEffect(() => {\r\n    if (urlEndpoint) {\r\n      setState({\r\n        searchText: searchText,\r\n        currentPage: 1,\r\n      });\r\n    }\r\n  }, [searchText, setState, urlEndpoint]);\r\n\r\n  useEffect(() => {\r\n    if (readGrid) {\r\n      fetchData();\r\n      resetState();\r\n    }\r\n\r\n    return () => {\r\n      setIdsSelection([]);\r\n      dispatch(gridViewActions.setItemIdSelections([]));\r\n      dispatch(gridViewActions.setItemDetailSelections([]));\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [readGrid]);\r\n\r\n  useEffect(() => {\r\n    if (data && isArray(data)) {\r\n      setData(data);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [JSON.stringify(data)]);\r\n\r\n  const onChange = (pagination, filters, sorter) => {\r\n    setState({\r\n      currentPage: pagination.current,\r\n      pageSize: pagination.pageSize,\r\n      sort: sorter ? [sorter] : [],\r\n    });\r\n  };\r\n\r\n  const rowSelection = {\r\n    selectedRowKeys: idsSelection,\r\n    onChange: (selectedRowKeys, selectedRows) => {\r\n      setIdsSelection(selectedRowKeys);\r\n      // handleCallback\r\n      handleGetSelections && handleGetSelections(selectedRowKeys);\r\n      handleGetDetailSelections && handleGetDetailSelections(selectedRows);\r\n\r\n      // save to redux gridView\r\n      if (shouldSaveToStore) {\r\n        dispatch(gridViewActions.setItemIdSelections(selectedRowKeys));\r\n        dispatch(gridViewActions.setItemDetailSelections(selectedRows));\r\n      }\r\n    },\r\n  };\r\n\r\n  const summary = () => (\r\n    <Table.Summary.Row>\r\n      {columns.map((x, index) => (\r\n        <>\r\n          <Table.Summary.Cell>{index === rest?.summaryNumberCol ? formatCurrency(totalAmount) : ''}</Table.Summary.Cell>\r\n        </>\r\n      ))}\r\n      <Table.Summary.Cell></Table.Summary.Cell>\r\n    </Table.Summary.Row>\r\n  );\r\n\r\n  return (\r\n    <div className={clsx('grid', className && className)}>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={state.data}\r\n        onChange={onChange}\r\n        bordered\r\n        pagination={\r\n          isHidePagination\r\n            ? false\r\n            : {\r\n              defaultPageSize: pageSize ? pageSize : state.pageSize,\r\n              showSizeChanger: true,\r\n              pageSizeOptions: ['5', '10', '20', '50'],\r\n              total: state.totalElement,\r\n              showTotal: shouldShowTotal ? () => `Có ${state.totalElement} dữ liệu` : null,\r\n            }\r\n        }\r\n        loading={state.loading}\r\n        expandable={{\r\n          expandedRowRender,\r\n        }}\r\n        rowKey={rowKey}\r\n        rowSelection={hasRowSelected ? rowSelection : null}\r\n        scroll={{ x: '100%' }}\r\n        {...rest}\r\n        summary={(state.data.length > 0 && !!rest.summaryNumberCol) ? summary : () => { }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nGrid.propTypes = {\r\n  className: PropTypes.string,\r\n  columns: PropTypes.array,\r\n  data: PropTypes.array,\r\n  expandedRowRender: PropTypes.any,\r\n  handleGetDetailSelections: PropTypes.func,\r\n  handleGetSelections: PropTypes.func,\r\n  hasRowSelected: PropTypes.bool,\r\n  isHidePagination: PropTypes.bool,\r\n  rowKey: PropTypes.string,\r\n  shouldSaveToStore: PropTypes.bool,\r\n  shouldShowTotal: PropTypes.bool,\r\n  urlEndpoint: PropTypes.oneOfType([PropTypes.string]),\r\n};\r\n\r\nexport default withTable(Grid);\r\n","import { conformsTo, isFunction, isObject } from 'lodash';\r\nimport invariant from 'invariant';\r\n\r\n/**\r\n * Validate the shape of redux store\r\n */\r\nexport default function checkStore(store) {\r\n  const shape = {\r\n    dispatch: isFunction,\r\n    subscribe: isFunction,\r\n    getState: isFunction,\r\n    replaceReducer: isFunction,\r\n    runSaga: isFunction,\r\n    injectedReducers: isObject,\r\n    injectedSagas: isObject,\r\n  };\r\n  invariant(conformsTo(store, shape), '(app/utils...) injectors: Expected a valid redux store');\r\n}\r\n","import invariant from 'invariant';\r\nimport { isEmpty, isFunction, isString } from 'lodash';\r\n\r\nimport checkStore from './checkStore';\r\nimport createReducer from '../../reducers';\r\n\r\nexport function injectReducerFactory(store, isValid) {\r\n  return function injectReducer(key, reducer) {\r\n    if (!isValid) checkStore(store);\r\n\r\n    invariant(\r\n      isString(key) && !isEmpty(key) && isFunction(reducer),\r\n      '(app/utils...) injectReducer: Expected `reducer` to be a reducer function',\r\n    );\r\n\r\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\r\n    if (Reflect.has(store.injectedReducers, key) && store.injectedReducers[key] === reducer) return;\r\n\r\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\r\n    store.replaceReducer(createReducer(store.injectedReducers));\r\n  };\r\n}\r\n\r\nexport default function getInjectors(store) {\r\n  checkStore(store);\r\n\r\n  return {\r\n    injectReducer: injectReducerFactory(store, true),\r\n  };\r\n}\r\n","import React from 'react';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport { ReactReduxContext } from 'react-redux';\r\n\r\nimport getInjectors from './reducerInjectors';\r\n\r\n/**\r\n * Dynamically injects a reducer\r\n *\r\n * @param {string} key A key of the reducer\r\n * @param {function} reducer A reducer that will be injected\r\n *\r\n */\r\nexport default ({ key, reducer }) =>\r\n  (WrappedComponent) => {\r\n    class ReducerInjector extends React.Component {\r\n      static WrappedComponent = WrappedComponent;\r\n\r\n      static contextType = ReactReduxContext;\r\n\r\n      static displayName = `withReducer(${WrappedComponent.displayName || WrappedComponent.name || 'Component'})`;\r\n\r\n      constructor(props, context) {\r\n        super(props, context);\r\n\r\n        getInjectors(context.store).injectReducer(key, reducer);\r\n      }\r\n\r\n      render() {\r\n        return <WrappedComponent {...this.props} />;\r\n      }\r\n    }\r\n\r\n    return hoistNonReactStatics(ReducerInjector, WrappedComponent);\r\n  };\r\n\r\nconst useInjectReducer = ({ key, reducer }) => {\r\n  const context = React.useContext(ReactReduxContext);\r\n  React.useEffect(() => {\r\n    getInjectors(context.store).injectReducer(key, reducer);\r\n  }, [context.store, key, reducer]);\r\n};\r\n\r\nexport { useInjectReducer };\r\n","import * as api from '../../config/axios';\r\n\r\nexport const urlEndpointCustomer = '/api/customers/';\r\nexport const urlEndpointTableCustomer= '/api/customers';\r\n\r\nexport const getCustomerById = (id) => api.sendGet(urlEndpointCustomer + id);\r\n\r\nexport const getCustomers = (data) => api.sendGet(urlEndpointCustomer, data);\r\n\r\nexport const createCustomer = (payload) =>\r\n  api.sendPost(urlEndpointCustomer, {\r\n    id: payload.id,\r\n    input: payload,\r\n  });\r\n\r\nexport const updateCustomer = (payload) => api.sendPost(urlEndpointCustomer, payload);\r\n\r\nexport const deleteCustomers = (payload) => api.sendDelete(urlEndpointCustomer, { data: { ids: payload } });\r\n\r\nexport const getCustomerDropdown = () => api.sendGet(urlEndpointCustomer + 'dropdown');\r\n","/** @format */\r\n\r\nimport * as api from '../../config/axios';\r\nexport const urlEndpointEmployee = '/api/employees/';\r\nexport const urlEndpointTableEmployee = '/api/employees';\r\n\r\n\r\nexport const getEmployeeById = (id) => api.sendGet(urlEndpointEmployee + id);\r\n\r\nexport const getEmployeeDropDown = () => api.sendGet(urlEndpointEmployee + 'dropdown/');\r\n\r\nexport const getEmployees = (data) => api.sendGet(urlEndpointEmployee, data);\r\n\r\nexport const getEmployeesByPermissions = (data) => api.sendGet(urlEndpointEmployee + 'by-permissions', data);\r\n\r\nexport const createEmployee = (payload) =>\r\n  api.sendPost(urlEndpointEmployee, {\r\n    id: payload.id,\r\n    input: payload,\r\n  });\r\n\r\nexport const updateEmployee = (payload) => api.sendPost(urlEndpointEmployee, payload);\r\n\r\nexport const deleteEmployees = (payload) =>\r\n  api.sendDelete(urlEndpointEmployee, {\r\n    data: { ids: payload },\r\n  });\r\n","/** @format */\r\n\r\nimport * as api from '../../config/axios';\r\nexport const urlEndpointField = '/api/fields/';\r\nexport const urlEndpointTableField = '/api/fields';\r\n\r\nexport const getFieldById = (id) => api.sendGet(urlEndpointField + id);\r\n\r\nexport const getFields = (data) => api.sendGet(urlEndpointField, data);\r\n\r\nexport const createFields = (payload) =>\r\n  api.sendPost(urlEndpointField, {\r\n    id: payload.id,\r\n    input: payload,\r\n  });\r\n\r\nexport const updateFields = (payload) => api.sendPost(urlEndpointField, payload);\r\n\r\nexport const deleteFields = (payload) =>\r\n  api.sendDelete(urlEndpointField, {\r\n    data: { ids: payload },\r\n  });\r\n\r\n  export const getFieldsDropDowns = () => api.sendGet(urlEndpointField + 'dropdown', '');\r\n","/* eslint-disable react/prop-types */\r\nimport { Button, Col, Form, Input, Row, Modal, Select } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { getFieldsDropDowns } from 'services/fields/';\r\n\r\nconst Filter = (props) => {\r\n  const {  isOpen, handleClosed, title, onApplyFilter } = props;\r\n  const [form] = Form.useForm();\r\n  const [fields, setFields] = useState([]);\r\n\r\n  const onReset = () => {\r\n    form.resetFields();\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    onApplyFilter(values)\r\n    handleClosed();\r\n  };\r\n\r\n  useEffect(() => {\r\n    getFields();\r\n  }, []);\r\n\r\n  const getFields = () => {\r\n    getFieldsDropDowns().then(res => {\r\n      setFields(res?.data || []);\r\n    });\r\n   \r\n  };\r\n\r\n  const renderFormFilter = () => {\r\n    return (\r\n      <Form\r\n        id=\"filterForm\"\r\n        labelCol={{ span: 14 }}\r\n        wrapperCol={{ span: 23 }}\r\n        form={form}\r\n        layout=\"vertical\"\r\n        onFinish={onFinish}\r\n      >\r\n      <Row>\r\n        <Col span={24}>\r\n          <Row>\r\n            <Col span={24}>\r\n            <Form.Item\r\n                label=\"Lĩnh Vực\"\r\n                name=\"fields\"\r\n              >\r\n                 <Select>\r\n                    {fields &&\r\n                      fields.map((item) => (\r\n                        <Select.Option key={item.id} value={item.id}>\r\n                          {item.name}\r\n                        </Select.Option>\r\n                      ))}\r\n                  </Select>\r\n              </Form.Item>\r\n            </Col>\r\n         \r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={title}\r\n      open={isOpen}\r\n      onCancel={handleClosed}\r\n      width={500}\r\n      footer={[\r\n        <Button type=\"link\" form=\"filterForm\" key=\"back\" onClick={onReset}>\r\n          Bộ lọc mặc định\r\n        </Button>,\r\n        <Button form=\"filterForm\" key=\"submit\" type=\"primary\" htmlType=\"submit\">\r\n          Lọc\r\n        </Button>,\r\n      ]}\r\n    >\r\n\r\n     {renderFormFilter()}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {};\r\n\r\nexport default Filter;\r\n","/** @format */\r\n\r\nimport * as api from '../../config/axios';\r\n\r\nexport const urlEndpointCustomerGroup = '/api/customer-groups/';\r\nexport const urlEndpointTableCustomerGroup = '/api/customer-groups';\r\n\r\nexport const getCustomerGroupById = (id) => api.sendGet(urlEndpointCustomerGroup + id);\r\n\r\nexport const getCustomerGroups = (data) => api.sendGet(urlEndpointCustomerGroup, data);\r\n\r\nexport const createCustomerGroup = (payload) =>\r\n  api.sendPost(urlEndpointCustomerGroup, {\r\n    id: payload.id,\r\n    input: payload,\r\n  });\r\n\r\nexport const updateCustomerGroup = (payload) =>\r\n  api.sendPost(urlEndpointCustomerGroup, {\r\n    id: payload.id,\r\n    input: payload,\r\n  });\r\n\r\nexport const deleteCustomerGroups = (payload) =>\r\n  api.sendDelete(urlEndpointCustomerGroup, {\r\n    data: { ids: payload },\r\n  });\r\n\r\nexport const getCustomerGroupDropDowns = () => api.sendGet(urlEndpointCustomerGroup + 'dropdown', '');\r\n","import React from 'react';\r\n\r\nimport { Spin } from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nconst Loading = ({ style, ...rest }) => {\r\n  const loadingIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        ...style,\r\n      }}\r\n      {...rest}\r\n    >\r\n      <Spin indicator={loadingIcon} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n"],"sourceRoot":""}
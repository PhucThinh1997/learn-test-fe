{"version":3,"sources":["utils/common/sagaInjectors.js","utils/common/injectSaga.js","pages/login/controllers/saga.js","pages/login/controllers/constants.js","pages/login/controllers/actions.js","common/components/indicator/Indicator.js","common/components/index.js","pages/login/index.js","../node_modules/invariant/browser.js","utils/common/checkStore.js","utils/common/reducerInjectors.js","utils/common/injectedReducers.js","utils/storage.js","components/Loading/Loading.js","services/login/index.js","services/login/endpoints.js"],"names":["allowedModes","RESTART_ON_REMOUNT","DAEMON","ONCE_TILL_UNMOUNT","checkKey","key","invariant","isString","isEmpty","checkDescriptor","descriptor","shape","saga","isFunction","mode","includes","conformsTo","injectSagaFactory","store","isValid","args","checkStore","newDescriptor","hasSaga","Reflect","has","injectedSagas","task","runSaga","ejectSagaFactory","cancel","getInjectors","injectSaga","ejectSaga","loginSaga","verifyOtpSaga","watchUserAuthentication","payload","put","type","loading","call","services","user","response","data","token","setSession","userInfo","parseJwt","UserId","getInfoUserById","res","info","permissions","map","x","code","infoUser","JSON","stringify","localStorage","setItem","USER_INFO","username","userName","fowardTo","isSuccess","error","errors","loginSuccess","message","takeLatest","login","Indicator","props","children","delay","size","tip","spinning","defaultProps","SuspendIndicator","Item","Password","Paragraph","Title","LogIn","setRegisterShow","useSelector","state","global","modeVerify","useState","infoLoginSavedSuccess","setInfoLoginSavedSuccess","useInjectReducer","reducer","globalReducer","context","React","useContext","ReactReduxContext","useEffect","injectors","useInjectSaga","dispatch","useDispatch","onFinish","values","twoFactorCode","password","actions","span","offset","className","name","rules","required","placeholder","htmlType","style","width","module","exports","condition","format","a","b","c","d","e","f","undefined","Error","argIndex","replace","framesToPop","subscribe","getState","replaceReducer","injectedReducers","isObject","injectReducerFactory","createReducer","injectReducer","getData","getItem","parse","cleanUp","keys","_","forEach","removeItem","Loading","rest","loadingIcon","fontSize","spin","display","justifyContent","alignItems","indicator","loginService","params","api","verifyOTP","logoutAPI"],"mappings":"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","file":"static/js/31.2c169f75.chunk.js","sourcesContent":["import invariant from 'invariant';\r\nimport { isEmpty, isFunction, isString, conformsTo } from 'lodash';\r\n\r\nimport checkStore from './checkStore';\r\nimport { DAEMON, ONCE_TILL_UNMOUNT, RESTART_ON_REMOUNT } from './constants';\r\n\r\nconst allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\r\n\r\nconst checkKey = (key) =>\r\n  invariant(isString(key) && !isEmpty(key), '(app/utils...) injectSaga: Expected `key` to be a non empty string');\r\n\r\nconst checkDescriptor = (descriptor) => {\r\n  const shape = {\r\n    saga: isFunction,\r\n    mode: (mode) => isString(mode) && allowedModes.includes(mode),\r\n  };\r\n  invariant(conformsTo(descriptor, shape), '(app/utils...) injectSaga: Expected a valid saga descriptor');\r\n};\r\n\r\nexport function injectSagaFactory(store, isValid) {\r\n  return function injectSaga(key, descriptor = {}, args) {\r\n    if (!isValid) checkStore(store);\r\n\r\n    const newDescriptor = {\r\n      ...descriptor,\r\n      mode: descriptor.mode || DAEMON,\r\n    };\r\n    const { saga, mode } = newDescriptor;\r\n\r\n    checkKey(key);\r\n    checkDescriptor(newDescriptor);\r\n\r\n    let hasSaga = Reflect.has(store.injectedSagas, key);\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      const oldDescriptor = store.injectedSagas[key];\r\n      // enable hot reloading of daemon and once-till-unmount sagas\r\n      if (hasSaga && oldDescriptor.saga !== saga) {\r\n        oldDescriptor.task.cancel();\r\n        hasSaga = false;\r\n      }\r\n    }\r\n\r\n    if (!hasSaga || (hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT)) {\r\n      /* eslint-disable no-param-reassign */\r\n      store.injectedSagas[key] = {\r\n        ...newDescriptor,\r\n        task: store.runSaga(saga, args),\r\n      };\r\n      /* eslint-enable no-param-reassign */\r\n    }\r\n  };\r\n}\r\n\r\nexport function ejectSagaFactory(store, isValid) {\r\n  return function ejectSaga(key) {\r\n    if (!isValid) checkStore(store);\r\n\r\n    checkKey(key);\r\n\r\n    if (Reflect.has(store.injectedSagas, key)) {\r\n      const descriptor = store.injectedSagas[key];\r\n      if (descriptor.mode && descriptor.mode !== DAEMON) {\r\n        descriptor.task.cancel();\r\n        // Clean up in production; in development we need `descriptor.saga` for hot reloading\r\n        if (process.env.NODE_ENV === 'production') {\r\n          // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\r\n          store.injectedSagas[key] = 'done'; // eslint-disable-line no-param-reassign\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default function getInjectors(store) {\r\n  checkStore(store);\r\n\r\n  return {\r\n    injectSaga: injectSagaFactory(store, true),\r\n    ejectSaga: ejectSagaFactory(store, true),\r\n  };\r\n}\r\n","import React from 'react';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport { ReactReduxContext } from 'react-redux';\r\n\r\nimport getInjectors from './sagaInjectors';\r\n\r\n/**\r\n * Dynamically injects a saga, passes component's props as saga arguments\r\n *\r\n * @param {string} key A key of the saga\r\n * @param {function} saga A root saga that will be injected\r\n * @param {string} [mode] By default (constants.DAEMON) the saga will be started\r\n * on component mount and never canceled or started again. Another two options:\r\n *   - constants.RESTART_ON_REMOUNT — the saga will be started on component mount and\r\n *   cancelled with `task.cancel()` on component unmount for improved performance,\r\n *   - constants.ONCE_TILL_UNMOUNT — behaves like 'RESTART_ON_REMOUNT' but never runs it again.\r\n *\r\n */\r\nexport default ({ key, saga, mode }) =>\r\n  (WrappedComponent) => {\r\n    class InjectSaga extends React.Component {\r\n      static WrappedComponent = WrappedComponent;\r\n\r\n      static contextType = ReactReduxContext;\r\n\r\n      static displayName = `withSaga(${WrappedComponent.displayName || WrappedComponent.name || 'Component'})`;\r\n\r\n      constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.injectors = getInjectors(context.store);\r\n\r\n        this.injectors.injectSaga(key, { saga, mode }, this.props);\r\n      }\r\n\r\n      componentWillUnmount() {\r\n        this.injectors.ejectSaga(key);\r\n      }\r\n\r\n      render() {\r\n        return <WrappedComponent {...this.props} />;\r\n      }\r\n    }\r\n\r\n    return hoistNonReactStatics(InjectSaga, WrappedComponent);\r\n  };\r\n\r\nconst useInjectSaga = ({ key, saga, mode }) => {\r\n  const context = React.useContext(ReactReduxContext);\r\n  React.useEffect(() => {\r\n    const injectors = getInjectors(context.store);\r\n    injectors.injectSaga(key, { saga, mode });\r\n\r\n    return () => {\r\n      injectors.ejectSaga(key);\r\n    };\r\n  }, [context.store, key, mode, saga]);\r\n};\r\n\r\nexport { useInjectSaga };\r\n","import { put, call } from 'redux-saga/effects';\r\n\r\nimport * as types from './constants';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nimport * as services from 'services/login';\r\nimport { fowardTo } from 'utils/common/route';\r\nimport { setSession, parseJwt, getAndSaveInfoUser } from 'utils/common/session';\r\nimport { setData } from 'utils/storage';\r\nimport { USER_KEY, USER_ID, USER_INFO } from 'static/Constants';\r\nimport { getInfoUserById } from 'services/user/user.service';\r\n\r\nexport function* loginSaga(payload) {\r\n  yield put({ type: 'SET_GLOBAL_LOADING', loading: true });\r\n  try {\r\n    const response = yield call(services.loginService, payload.user);\r\n    const token = response?.data?.token\r\n\r\n    if (token) {\r\n      const { token } = response.data;\r\n      // set token into local store\r\n      yield call(setSession, token);\r\n\r\n      const userInfo = parseJwt(token)\r\n\r\n      if (userInfo && userInfo.UserId) {\r\n        const res = yield call(getInfoUserById, userInfo.UserId);\r\n        if (res) {\r\n          let info = res.data\r\n          info.permissions = res.data.permissions.map(x => x.code)\r\n          const infoUser = JSON.stringify(info)\r\n          localStorage.setItem(USER_INFO, infoUser);\r\n          yield put({ type: 'SET_USER_INFO', info });\r\n          yield put({ type: types.LOGIN_SUCCESS, username: info.userName });\r\n          yield call(fowardTo, '/dashboard');\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!response.isSuccess) {\r\n      yield put({ type: types.LOGIN_ERROR, error: response.errors[0] });\r\n    } else {\r\n      const loginSuccess = true\r\n      yield put({ type: types.SET_LOGIN_SUCCESS, loginSuccess });\r\n      yield put({ type: 'SET_GLOBAL_LOADING', loading: false });\r\n    }\r\n  } catch (error) {\r\n    let message = error;\r\n    if (typeof error === 'object') message = error.message;\r\n    yield put({ type: types.LOGIN_ERROR, message });\r\n  }\r\n  finally {\r\n    yield put({ type: 'SET_GLOBAL_LOADING', loading: false });\r\n  }\r\n}\r\n\r\nexport function* verifyOtpSaga(payload) {\r\n  yield put({ type: 'SET_GLOBAL_LOADING', loading: false });\r\n  try {\r\n    const response = yield call(services.verifyOTP, payload.code);\r\n    if (!response.isSuccess) {\r\n      yield put({ type: types.LOGIN_ERROR, error: response.errors[0] });\r\n    } else {\r\n      const { token } = response.data;\r\n      // set token into local store\r\n      yield call(setSession, token);\r\n\r\n      const userInfo = parseJwt(token)\r\n\r\n      if (userInfo && userInfo.UserId) {\r\n        const res = yield call(getInfoUserById, userInfo.UserId);\r\n        if (res) {\r\n          let info = res.data\r\n          info.permissions = res.data.permissions.map(x => x.code)\r\n          const infoUser = JSON.stringify(info)\r\n          localStorage.setItem(USER_INFO, infoUser);\r\n          yield put({ type: 'SET_USER_INFO', info });\r\n          yield put({ type: types.LOGIN_SUCCESS, username: info.userName });\r\n          yield call(fowardTo, '/dashboard');\r\n        }\r\n      }\r\n\r\n    }\r\n  } catch (error) {\r\n    // let message = error;\r\n    // if (typeof error === 'object') message = error.message;\r\n    // yield put({ type: types.LOGIN_ERROR, message });\r\n  }\r\n  finally {\r\n    yield put({ type: 'SET_GLOBAL_LOADING', loading: false });\r\n  }\r\n}\r\n\r\n\r\nexport default function* watchUserAuthentication() {\r\n  yield takeLatest(types.LOGIN, loginSaga);\r\n  yield takeLatest(types.VERIFY_OTP, verifyOtpSaga);\r\n}\r\n","// Action Types\r\nexport const LOGIN = 'LOGIN';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\r\nexport const RESET_LOGIN = 'RESET_LOGIN';\r\nexport const VERIFY_OTP = 'VERIFY_OTP';\r\nexport const SET_LOGIN_SUCCESS = 'SET_LOGIN_SUCCESS';\r\nexport const VERIFY_OTP_SUCCESS = 'VERIFY_OTP_SUCCESS';\r\nexport const VERIFY_OTP_ERROR = 'VERIFY_OTP_ERROR';\r\n\r\n","import * as types from './constants';\r\n\r\n/**\r\n * apply user information when user has logged in successfully\r\n * @param {object} user\r\n */\r\nexport function login(user) {\r\n  return {\r\n    type: types.LOGIN,\r\n    user: user,\r\n  };\r\n}\r\n\r\nexport function verifyOtp(info) {\r\n  return {\r\n    type: types.VERIFY_OTP,\r\n    code: info,\r\n  };\r\n}\r\n\r\nexport function reset() {\r\n  return {\r\n    type: types.RESET_LOGIN,\r\n  };\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Spin } from 'antd';\r\n\r\nconst Indicator = (props) => {\r\n  const { loading, children, delay, size, tip } = props;\r\n  return (\r\n    <Spin spinning={loading} size={size} delay={delay} tip={tip}>\r\n      {children}\r\n    </Spin>\r\n  );\r\n};\r\n\r\nIndicator.propTypes = {\r\n  /**\r\n   * children items inside spinner\r\n   */\r\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\r\n  /**\r\n   * the spinner loading state\r\n   */\r\n  loading: PropTypes.bool.isRequired,\r\n  /**\r\n   * spinner size\r\n   */\r\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\r\n  /**\r\n   * A minimal millisecond number waiting before spinner appears\r\n   */\r\n  delay: PropTypes.string,\r\n  /**\r\n   * message display along to spinner\r\n   */\r\n  tip: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n};\r\n\r\nIndicator.defaultProps = {\r\n  loading: false,\r\n  children: [],\r\n  size: 'medium',\r\n};\r\nexport default Indicator;\r\n","// indicator\r\nimport CustomIndicator from './indicator/Indicator';\r\nimport SuspendIndicator from './indicator/SuspendIndicator';\r\n// layout\r\nimport Content from './layout/Content';\r\nimport Footer from './layout/Footer';\r\nimport Header from './layout/Header';\r\n\r\n// wrapper\r\nimport WithIndicator from './wrapper/WithIndicator';\r\n\r\n// export\r\nexport const Indicator = CustomIndicator;\r\nexport const DelayedFallback = SuspendIndicator;\r\nexport const ContentLayout = Content;\r\nexport const FooterLayout = Footer;\r\nexport const HeaderLayout = Header;\r\nexport const WithIndicatorWrapper = WithIndicator;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Row, Col, Form, Input, Button, Typography } from 'antd';\r\nimport { useInjectReducer } from 'utils/common/injectedReducers';\r\nimport { useInjectSaga } from 'utils/common/injectSaga';\r\nimport saga from './controllers/saga';\r\nimport * as actions from './controllers/actions';\r\nimport globalReducer from 'redux/global/reducer';\r\nimport './style.less';\r\nimport Loading from 'components/Loading/Loading';\r\nimport { Indicator } from 'common/components';\r\n\r\nconst { Item } = Form;\r\nconst { Password } = Input;\r\nconst { Title, Paragraph } = Typography;\r\nconst key = 'user';\r\n\r\nconst LogIn = (props) => {\r\n  const { setRegisterShow } = props;\r\n  // const [isLoading, setLoading] = useState(false);\r\n  const user = useSelector((state) => state.global.user);\r\n  const error = useSelector((state) => state.global.error);\r\n  const loading = useSelector((state) => state.global.loading);\r\n  const modeVerify = useSelector((state) => state.global.modeVerify);\r\n  const [infoLoginSavedSuccess, setInfoLoginSavedSuccess] = useState(null);\r\n\r\n  useInjectReducer({ key, reducer: globalReducer });\r\n  useInjectSaga({ key, saga });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      // setLoading(false);\r\n    }\r\n  }, [user]);\r\n\r\n  const onFinish = async (values) => {\r\n    if (values.code) {\r\n      if (infoLoginSavedSuccess) {\r\n        infoLoginSavedSuccess.twoFactorCode = values.code\r\n      }\r\n\r\n      // xac thuc\r\n      dispatch(actions.verifyOtp(infoLoginSavedSuccess));\r\n    } else {\r\n      //login\r\n      const user = {\r\n        username: values.username,\r\n        password: values.password,\r\n      };\r\n      setInfoLoginSavedSuccess(user)\r\n      dispatch(actions.login(user));\r\n    }\r\n  };\r\n\r\n  const renderFormByMode = () => {\r\n    if (!modeVerify) {\r\n      return (\r\n        <div>\r\n          <h3 >Đăng nhập hệ thống</h3>\r\n          <Item\r\n            name=\"username\"\r\n            rules={[\r\n              {\r\n                type: 'username',\r\n                message: 'Username',\r\n              },\r\n              {\r\n                required: true,\r\n                message: 'Vui lòng nhập tài khoản',\r\n              },\r\n            ]}\r\n          >\r\n            <Input placeholder=\"Nhập tài khoản\" />\r\n          </Item>\r\n          <Item\r\n            name=\"password\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: 'Vui lòng nhập mật khẩu',\r\n              },\r\n            ]}\r\n          >\r\n            <Password placeholder=\"Nhập mật khẩu\" />\r\n          </Item>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h2 >Xác Thực OTP</h2>\r\n        <h4 >Mã xác thực được gửi đến email của bạn. Nhập mã để tiếp tục</h4>\r\n        <Item\r\n          name=\"code\"\r\n          rules={[\r\n            {\r\n              type: 'code',\r\n              message: 'code',\r\n            },\r\n            {\r\n              required: true,\r\n              message: 'Vui lòng nhập mã code',\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Nhập mã code\" />\r\n        </Item>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col span={22} offset={1}>\r\n          <div className=\"logo-text\"> CRM SYSTEM </div>\r\n          <div className=\"logo-text-footer\"> Hệ thống quản lý quan hệ khách hàng </div>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col span={14} offset={1} >\r\n          <div className=\"login-page\"> </div>\r\n        </Col>\r\n        <Col span={7} offset={1}>\r\n          <Form name=\"register-form\" onFinish={onFinish}>\r\n            <div className=\"swapper-login\">\r\n              <Row >\r\n\r\n                <Col span={24} >\r\n                  {renderFormByMode()}\r\n                  <Button loading={loading} type=\"primary\" htmlType=\"submit\" style={{ width: '100%' }}>\r\n                    {modeVerify ? 'Xác thực' : 'Đăng nhập'}\r\n                  </Button>\r\n                  {error && <Paragraph className=\"error-message\">{error}</Paragraph>}\r\n                  {/* {isLoading && <Loading />} */}\r\n                </Col>\r\n              </Row>\r\n              <Row >\r\n              </Row>\r\n            </div>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default LogIn;\r\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","import { conformsTo, isFunction, isObject } from 'lodash';\r\nimport invariant from 'invariant';\r\n\r\n/**\r\n * Validate the shape of redux store\r\n */\r\nexport default function checkStore(store) {\r\n  const shape = {\r\n    dispatch: isFunction,\r\n    subscribe: isFunction,\r\n    getState: isFunction,\r\n    replaceReducer: isFunction,\r\n    runSaga: isFunction,\r\n    injectedReducers: isObject,\r\n    injectedSagas: isObject,\r\n  };\r\n  invariant(conformsTo(store, shape), '(app/utils...) injectors: Expected a valid redux store');\r\n}\r\n","import invariant from 'invariant';\r\nimport { isEmpty, isFunction, isString } from 'lodash';\r\n\r\nimport checkStore from './checkStore';\r\nimport createReducer from '../../reducers';\r\n\r\nexport function injectReducerFactory(store, isValid) {\r\n  return function injectReducer(key, reducer) {\r\n    if (!isValid) checkStore(store);\r\n\r\n    invariant(\r\n      isString(key) && !isEmpty(key) && isFunction(reducer),\r\n      '(app/utils...) injectReducer: Expected `reducer` to be a reducer function',\r\n    );\r\n\r\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\r\n    if (Reflect.has(store.injectedReducers, key) && store.injectedReducers[key] === reducer) return;\r\n\r\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\r\n    store.replaceReducer(createReducer(store.injectedReducers));\r\n  };\r\n}\r\n\r\nexport default function getInjectors(store) {\r\n  checkStore(store);\r\n\r\n  return {\r\n    injectReducer: injectReducerFactory(store, true),\r\n  };\r\n}\r\n","import React from 'react';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport { ReactReduxContext } from 'react-redux';\r\n\r\nimport getInjectors from './reducerInjectors';\r\n\r\n/**\r\n * Dynamically injects a reducer\r\n *\r\n * @param {string} key A key of the reducer\r\n * @param {function} reducer A reducer that will be injected\r\n *\r\n */\r\nexport default ({ key, reducer }) =>\r\n  (WrappedComponent) => {\r\n    class ReducerInjector extends React.Component {\r\n      static WrappedComponent = WrappedComponent;\r\n\r\n      static contextType = ReactReduxContext;\r\n\r\n      static displayName = `withReducer(${WrappedComponent.displayName || WrappedComponent.name || 'Component'})`;\r\n\r\n      constructor(props, context) {\r\n        super(props, context);\r\n\r\n        getInjectors(context.store).injectReducer(key, reducer);\r\n      }\r\n\r\n      render() {\r\n        return <WrappedComponent {...this.props} />;\r\n      }\r\n    }\r\n\r\n    return hoistNonReactStatics(ReducerInjector, WrappedComponent);\r\n  };\r\n\r\nconst useInjectReducer = ({ key, reducer }) => {\r\n  const context = React.useContext(ReactReduxContext);\r\n  React.useEffect(() => {\r\n    getInjectors(context.store).injectReducer(key, reducer);\r\n  }, [context.store, key, reducer]);\r\n};\r\n\r\nexport { useInjectReducer };\r\n","import _ from 'lodash';\r\n\r\n/**\r\n * Store received data into local storage\r\n * @param {object} data data will store within local storage\r\n * @param {string} key local storage item key\r\n */\r\nexport const setData = (data, key) => {\r\n  if (!key) return;\r\n  if (!data) return;\r\n  let encodedData = data;\r\n  if (typeof data == 'object') encodedData = JSON.stringify(data);\r\n  localStorage.setItem(key, encodedData);\r\n};\r\n/**\r\n * Retrieve data from local storage key\r\n * @param {string} key local storage item key\r\n */\r\nexport const getData = (key) => {\r\n  if (!key) return;\r\n  const data = localStorage.getItem(key);\r\n  return data ? typeof data === 'string' ? data : JSON.parse(data) : data;\r\n};\r\n\r\nexport const cleanUp = (keys) => {\r\n  _.forEach(keys, function (key) {\r\n    localStorage.removeItem(key);\r\n  });\r\n};\r\n","import React from 'react';\r\n\r\nimport { Spin } from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nconst Loading = ({ style, ...rest }) => {\r\n  const loadingIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        ...style,\r\n      }}\r\n      {...rest}\r\n    >\r\n      <Spin indicator={loadingIcon} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import * as api from 'config/axios';\r\nimport * as endpoints from './endpoints';\r\n\r\n/**\r\n * User login service\r\n * @param {object} data user login information\r\n */\r\nexport const loginService = (params) => api.sendPost(`${endpoints.USER_LOGIN_ENDPOINT}/send-otp`, params);\r\n\r\nexport const verifyOTP = (params) => api.sendPost(`${endpoints.USER_LOGIN_ENDPOINT}/verify-otp`, params);\r\n\r\nexport const logoutAPI = () => api.sendPost(`${endpoints.USER_LOGIN_ENDPOINT}/logout`, {});\r\n","export const USER_LOGIN_ENDPOINT = '/api/authenticate';\r\n"],"sourceRoot":""}
{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/invariant/browser.js","../node_modules/antd/es/tree-select/style/index.js","../node_modules/rc-tree-select/es/LegacyContext.js","../node_modules/rc-tree-select/es/TreeSelectContext.js","../node_modules/rc-tree-select/es/utils/valueUtil.js","../node_modules/rc-tree-select/es/OptionList.js","../node_modules/rc-tree-select/es/TreeNode.js","../node_modules/rc-tree-select/es/utils/strategyUtil.js","../node_modules/rc-tree-select/es/utils/legacyUtil.js","../node_modules/rc-tree-select/es/hooks/useTreeData.js","../node_modules/rc-tree-select/es/hooks/useRefFunc.js","../node_modules/rc-tree-select/es/utils/warningPropsUtil.js","../node_modules/rc-tree-select/es/TreeSelect.js","../node_modules/rc-tree-select/es/hooks/useDataEntities.js","../node_modules/rc-tree-select/es/hooks/useFilterTreeData.js","../node_modules/rc-tree-select/es/hooks/useCheckedKeys.js","../node_modules/rc-tree-select/es/hooks/useCache.js","../node_modules/rc-tree-select/es/index.js","../node_modules/antd/es/tree-select/index.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","module","exports","condition","format","a","b","c","d","e","f","error","undefined","Error","args","argIndex","replace","name","framesToPop","LegacySelectContext","React","TreeSelectContext","toArray","value","isCheckDisabled","node","disabled","disableCheckbox","checkable","isNil","val","HIDDEN_STYLE","width","height","display","overflow","opacity","border","padding","margin","OptionList","_","ref","_useBaseProps","useBaseProps","prefixCls","multiple","searchValue","toggleOpen","open","notFoundContent","_React$useContext","virtual","listHeight","listItemHeight","treeData","fieldNames","onSelect","dropdownMatchSelectWidth","treeExpandAction","_React$useContext2","LegacyContext","checkedKeys","halfCheckedKeys","treeExpandedKeys","treeDefaultExpandAll","treeDefaultExpandedKeys","onTreeExpand","treeIcon","showTreeIcon","switcherIcon","treeLine","treeNodeFilterProp","loadData","treeLoadedKeys","treeMotion","onTreeLoad","keyEntities","treeRef","memoTreeData","useMemo","prev","next","mergedCheckedKeys","checked","halfChecked","_treeRef$current","length","current","scrollTo","key","lowerSearchValue","String","toLowerCase","_React$useState","_React$useState2","_slicedToArray","expandedKeys","setExpandedKeys","_React$useState3","_React$useState4","searchExpandedKeys","setSearchExpandedKeys","mergedExpandedKeys","keys","dig","list","forEach","item","push","children","getAllKeys","onListMouseDown","event","preventDefault","onInternalSelect","__","info","selected","includes","_React$useState5","_React$useState6","activeKey","setActiveKey","activeEntity","_treeRef$current2","onKeyDown","_treeRef$current3","which","KeyCode","UP","DOWN","LEFT","RIGHT","ENTER","_ref","selectable","ESC","onKeyUp","role","className","concat","onMouseDown","treeProps","loadedKeys","style","Tree","_extends","focusable","itemHeight","icon","showIcon","showLine","motion","checkStrictly","selectedKeys","defaultExpandAll","onActiveChange","onCheck","onExpand","onLoad","filterTreeNode","treeNode","expandAction","RefOptionList","displayName","TreeNode","formatStrategyValues","values","strategy","valueSet","Set","filter","entity","some","has","every","_ref2","parent","_excluded","fillLegacyProps","dataNode","cloneNode","_objectSpread","defineProperty","get","warning","useTreeData","simpleMode","id","pId","rootPId","keyNodes","rootNodeList","map","clone","parentKey","parseSimpleTreeData","convertChildrenToData","nodes","type","_node$props","props","restProps","_objectWithoutProperties","data","childData","useRefFunc","callback","funcRef","apply","arguments","warningProps","GenericTreeSelect","_props$prefixCls","defaultValue","onChange","onDeselect","inputValue","onSearch","_props$autoClearSearc","autoClearSearchValue","_props$treeNodeFilter","_props$showCheckedStr","showCheckedStrategy","treeNodeLabelProp","treeCheckable","treeCheckStrictly","labelInValue","treeDataSimpleMode","_props$listHeight","_props$listItemHeight","onDropdownVisibleChange","_props$dropdownMatchS","mergedId","useId","treeConduction","mergedCheckable","mergedLabelInValue","mergedMultiple","mergedFieldNames","label","mergedValue","_title","fillFieldNames","JSON","stringify","_useMergedState","useMergedState","postState","search","_useMergedState2","mergedSearchValue","setSearchValue","mergedTreeData","_useDataEntities","convertDataToEntities","initWrapper","wrapper","valueEntities","Map","processEntity","set","useDataEntities","splitRawValues","newRawValues","missingRawValues","existRawValues","filteredTreeData","fieldChildren","filterOptionFunc","upperStr","toUpperCase","keepAll","match","childList","_defineProperty","isLeaf","useFilterTreeData","getLabel","titleList","i","title","toLabeledValues","draftValues","_typeof","isRawValue","convert2LabelValues","rawDisabled","_rawLabel","rawLabel","rawValue","rawHalfChecked","_useMergedState3","_useMergedState4","internalValue","setInternalValue","rawMixedLabeledValues","_React$useMemo","fullCheckValues","halfCheckValues","_React$useMemo2","rawLabeledValues","rawHalfLabeledValues","rawValues","_useCheckedKeys","rawHalfCheckedValues","missingValues","_conductCheck","conductCheck","useCheckedKeys","_useCheckedKeys2","rawCheckedValues","_useCache","cacheRef","valueLabels","valueLabelsCache","filledValues","_item$label","mergedLabel","useCache","labeledValues","_keyEntities$key$node","_keyEntities$key","_keyEntities$key$node2","targetItem","find","rawDisplayValues","firstVal","cachedDisplayValues","triggerChange","extra","source","eventValues","formattedKeyList","triggerValue","returnRawValues","halfValues","returnLabeledValues","additionalInfo","preValue","showPosition","checkedValues","triggerNode","nodeList","generateMap","level","parentIncluded","option","index","pos","included","child","checkedNode","sort","val1","val2","indexOf","_ref3","fillAdditionalInfo","returnValues","onOptionSelect","selectedKey","_node$mergedFieldName","selectedValue","v","_splitRawValues","keyList","onInternalDropdownVisibleChange","legacyParam","onDisplayValuesChange","newValues","treeSelectContext","legacyContext","Provider","BaseSelect","mode","displayValues","searchText","emptyOptions","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","TreeSelect","__rest","s","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","propertyIsEnumerable","InternalTreeSelect","_a","_classNames2","mergedNotFound","customizePrefixCls","customizeSize","size","customDisabled","_a$bordered","bordered","_a$listHeight","_a$listItemHeight","placement","_switcherIcon","getPopupContainer","dropdownClassName","popupClassName","_a$treeIcon","transitionName","_a$choiceTransitionNa","choiceTransitionName","customStatus","status","showArrow","ConfigContext","getContextPopupContainer","getPrefixCls","renderEmpty","direction","SizeContext","treePrefixCls","treeSelectPrefixCls","mergedDropdownClassName","classNames","isMultiple","mergedShowArrow","loading","_useContext","useContext","FormItemInputContext","contextStatus","hasFeedback","isFormItemInput","feedbackIcon","mergedStatus","getMergedStatus","_getIcons","getIcons","suffixIcon","removeIcon","clearIcon","defaultRenderEmpty","selectProps","omit","mergedSize","DisabledContext","mergedDisabled","mergedClassName","getStatusClassNames","rootPrefixCls","RcTreeSelect","inputIcon","nodeProps","renderSwitcherIcon","getTransitionName","getTransitionDirection"],"mappings":"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","file":"static/js/34.09d088ae.chunk.js","sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","import '../../style/default.less';\nimport './index.less'; // style dependencies\n// deps-lint-skip: tree, form\n\nimport '../../empty/style';\nimport '../../select/style';","import * as React from 'react';\nvar LegacySelectContext = /*#__PURE__*/React.createContext(null);\nexport default LegacySelectContext;","import * as React from 'react';\nvar TreeSelectContext = /*#__PURE__*/React.createContext(null);\nexport default TreeSelectContext;","export function toArray(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return value !== undefined ? [value] : [];\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n      label = _ref.label,\n      value = _ref.value,\n      children = _ref.children;\n\n  var mergedValue = value || 'value';\n  return {\n    _title: label ? [label] : ['title', 'label'],\n    value: mergedValue,\n    key: mergedValue,\n    children: children || 'children'\n  };\n}\nexport function isCheckDisabled(node) {\n  return !node || node.disabled || node.disableCheckbox || node.checkable === false;\n}\n/** Loop fetch all the keys exist in the tree */\n\nexport function getAllKeys(treeData, fieldNames) {\n  var keys = [];\n\n  function dig(list) {\n    list.forEach(function (item) {\n      keys.push(item[fieldNames.value]);\n      var children = item[fieldNames.children];\n\n      if (children) {\n        dig(children);\n      }\n    });\n  }\n\n  dig(treeData);\n  return keys;\n}\nexport function isNil(val) {\n  return val === null || val === undefined;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport { useBaseProps } from 'rc-select';\nimport Tree from 'rc-tree';\nimport LegacyContext from './LegacyContext';\nimport TreeSelectContext from './TreeSelectContext';\nimport { getAllKeys, isCheckDisabled } from './utils/valueUtil';\nvar HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: 'flex',\n  overflow: 'hidden',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\n\nvar OptionList = function OptionList(_, ref) {\n  var _useBaseProps = useBaseProps(),\n      prefixCls = _useBaseProps.prefixCls,\n      multiple = _useBaseProps.multiple,\n      searchValue = _useBaseProps.searchValue,\n      toggleOpen = _useBaseProps.toggleOpen,\n      open = _useBaseProps.open,\n      notFoundContent = _useBaseProps.notFoundContent;\n\n  var _React$useContext = React.useContext(TreeSelectContext),\n      virtual = _React$useContext.virtual,\n      listHeight = _React$useContext.listHeight,\n      listItemHeight = _React$useContext.listItemHeight,\n      treeData = _React$useContext.treeData,\n      fieldNames = _React$useContext.fieldNames,\n      onSelect = _React$useContext.onSelect,\n      dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth,\n      treeExpandAction = _React$useContext.treeExpandAction;\n\n  var _React$useContext2 = React.useContext(LegacyContext),\n      checkable = _React$useContext2.checkable,\n      checkedKeys = _React$useContext2.checkedKeys,\n      halfCheckedKeys = _React$useContext2.halfCheckedKeys,\n      treeExpandedKeys = _React$useContext2.treeExpandedKeys,\n      treeDefaultExpandAll = _React$useContext2.treeDefaultExpandAll,\n      treeDefaultExpandedKeys = _React$useContext2.treeDefaultExpandedKeys,\n      onTreeExpand = _React$useContext2.onTreeExpand,\n      treeIcon = _React$useContext2.treeIcon,\n      showTreeIcon = _React$useContext2.showTreeIcon,\n      switcherIcon = _React$useContext2.switcherIcon,\n      treeLine = _React$useContext2.treeLine,\n      treeNodeFilterProp = _React$useContext2.treeNodeFilterProp,\n      loadData = _React$useContext2.loadData,\n      treeLoadedKeys = _React$useContext2.treeLoadedKeys,\n      treeMotion = _React$useContext2.treeMotion,\n      onTreeLoad = _React$useContext2.onTreeLoad,\n      keyEntities = _React$useContext2.keyEntities;\n\n  var treeRef = React.useRef();\n  var memoTreeData = useMemo(function () {\n    return treeData;\n  }, [open, treeData], function (prev, next) {\n    return next[0] && prev[1] !== next[1];\n  }); // ========================== Values ==========================\n\n  var mergedCheckedKeys = React.useMemo(function () {\n    if (!checkable) {\n      return null;\n    }\n\n    return {\n      checked: checkedKeys,\n      halfChecked: halfCheckedKeys\n    };\n  }, [checkable, checkedKeys, halfCheckedKeys]); // ========================== Scroll ==========================\n\n  React.useEffect(function () {\n    // Single mode should scroll to current key\n    if (open && !multiple && checkedKeys.length) {\n      var _treeRef$current;\n\n      (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : _treeRef$current.scrollTo({\n        key: checkedKeys[0]\n      });\n    }\n  }, [open]); // ========================== Search ==========================\n\n  var lowerSearchValue = String(searchValue).toLowerCase();\n\n  var filterTreeNode = function filterTreeNode(treeNode) {\n    if (!lowerSearchValue) {\n      return false;\n    }\n\n    return String(treeNode[treeNodeFilterProp]).toLowerCase().includes(lowerSearchValue);\n  }; // =========================== Keys ===========================\n\n\n  var _React$useState = React.useState(treeDefaultExpandedKeys),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandedKeys = _React$useState2[0],\n      setExpandedKeys = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      searchExpandedKeys = _React$useState4[0],\n      setSearchExpandedKeys = _React$useState4[1];\n\n  var mergedExpandedKeys = React.useMemo(function () {\n    if (treeExpandedKeys) {\n      return _toConsumableArray(treeExpandedKeys);\n    }\n\n    return searchValue ? searchExpandedKeys : expandedKeys;\n  }, [expandedKeys, searchExpandedKeys, treeExpandedKeys, searchValue]);\n  React.useEffect(function () {\n    if (searchValue) {\n      setSearchExpandedKeys(getAllKeys(treeData, fieldNames));\n    }\n  }, [searchValue]);\n\n  var onInternalExpand = function onInternalExpand(keys) {\n    setExpandedKeys(keys);\n    setSearchExpandedKeys(keys);\n\n    if (onTreeExpand) {\n      onTreeExpand(keys);\n    }\n  }; // ========================== Events ==========================\n\n\n  var onListMouseDown = function onListMouseDown(event) {\n    event.preventDefault();\n  };\n\n  var onInternalSelect = function onInternalSelect(__, info) {\n    var node = info.node;\n\n    if (checkable && isCheckDisabled(node)) {\n      return;\n    }\n\n    onSelect(node.key, {\n      selected: !checkedKeys.includes(node.key)\n    });\n\n    if (!multiple) {\n      toggleOpen(false);\n    }\n  }; // ========================= Keyboard =========================\n\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      activeKey = _React$useState6[0],\n      setActiveKey = _React$useState6[1];\n\n  var activeEntity = keyEntities[activeKey];\n  React.useImperativeHandle(ref, function () {\n    var _treeRef$current2;\n\n    return {\n      scrollTo: (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.scrollTo,\n      onKeyDown: function onKeyDown(event) {\n        var _treeRef$current3;\n\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n          case KeyCode.LEFT:\n          case KeyCode.RIGHT:\n            (_treeRef$current3 = treeRef.current) === null || _treeRef$current3 === void 0 ? void 0 : _treeRef$current3.onKeyDown(event);\n            break;\n          // >>> Select item\n\n          case KeyCode.ENTER:\n            {\n              if (activeEntity) {\n                var _ref = (activeEntity === null || activeEntity === void 0 ? void 0 : activeEntity.node) || {},\n                    selectable = _ref.selectable,\n                    value = _ref.value;\n\n                if (selectable !== false) {\n                  onInternalSelect(null, {\n                    node: {\n                      key: activeKey\n                    },\n                    selected: !checkedKeys.includes(value)\n                  });\n                }\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              toggleOpen(false);\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  if (memoTreeData.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      role: \"listbox\",\n      className: \"\".concat(prefixCls, \"-empty\"),\n      onMouseDown: onListMouseDown\n    }, notFoundContent);\n  }\n\n  var treeProps = {\n    fieldNames: fieldNames\n  };\n\n  if (treeLoadedKeys) {\n    treeProps.loadedKeys = treeLoadedKeys;\n  }\n\n  if (mergedExpandedKeys) {\n    treeProps.expandedKeys = mergedExpandedKeys;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onMouseDown: onListMouseDown\n  }, activeEntity && open && /*#__PURE__*/React.createElement(\"span\", {\n    style: HIDDEN_STYLE,\n    \"aria-live\": \"assertive\"\n  }, activeEntity.node.value), /*#__PURE__*/React.createElement(Tree, _extends({\n    ref: treeRef,\n    focusable: false,\n    prefixCls: \"\".concat(prefixCls, \"-tree\"),\n    treeData: memoTreeData,\n    height: listHeight,\n    itemHeight: listItemHeight,\n    virtual: virtual !== false && dropdownMatchSelectWidth !== false,\n    multiple: multiple,\n    icon: treeIcon,\n    showIcon: showTreeIcon,\n    switcherIcon: switcherIcon,\n    showLine: treeLine,\n    loadData: searchValue ? null : loadData,\n    motion: treeMotion,\n    activeKey: activeKey // We handle keys by out instead tree self\n    ,\n    checkable: checkable,\n    checkStrictly: true,\n    checkedKeys: mergedCheckedKeys,\n    selectedKeys: !checkable ? checkedKeys : [],\n    defaultExpandAll: treeDefaultExpandAll\n  }, treeProps, {\n    // Proxy event out\n    onActiveChange: setActiveKey,\n    onSelect: onInternalSelect,\n    onCheck: onInternalSelect,\n    onExpand: onInternalExpand,\n    onLoad: onTreeLoad,\n    filterTreeNode: filterTreeNode,\n    expandAction: treeExpandAction\n  })));\n};\n\nvar RefOptionList = /*#__PURE__*/React.forwardRef(OptionList);\nRefOptionList.displayName = 'OptionList';\nexport default RefOptionList;","/** This is a placeholder, not real render in dom */\nvar TreeNode = function TreeNode() {\n  return null;\n};\n\nexport default TreeNode;","import { isCheckDisabled } from './valueUtil';\nexport var SHOW_ALL = 'SHOW_ALL';\nexport var SHOW_PARENT = 'SHOW_PARENT';\nexport var SHOW_CHILD = 'SHOW_CHILD';\nexport function formatStrategyValues(values, strategy, keyEntities, fieldNames) {\n  var valueSet = new Set(values);\n\n  if (strategy === SHOW_CHILD) {\n    return values.filter(function (key) {\n      var entity = keyEntities[key];\n\n      if (entity && entity.children && entity.children.some(function (_ref) {\n        var node = _ref.node;\n        return valueSet.has(node[fieldNames.value]);\n      }) && entity.children.every(function (_ref2) {\n        var node = _ref2.node;\n        return isCheckDisabled(node) || valueSet.has(node[fieldNames.value]);\n      })) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  if (strategy === SHOW_PARENT) {\n    return values.filter(function (key) {\n      var entity = keyEntities[key];\n      var parent = entity ? entity.parent : null;\n\n      if (parent && !isCheckDisabled(parent.node) && valueSet.has(parent.key)) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return values;\n}","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"value\"];\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport TreeNode from '../TreeNode';\nexport function convertChildrenToData(nodes) {\n  return toArray(nodes).map(function (node) {\n    if (! /*#__PURE__*/React.isValidElement(node) || !node.type) {\n      return null;\n    }\n\n    var key = node.key,\n        _node$props = node.props,\n        children = _node$props.children,\n        value = _node$props.value,\n        restProps = _objectWithoutProperties(_node$props, _excluded);\n\n    var data = _objectSpread({\n      key: key,\n      value: value\n    }, restProps);\n\n    var childData = convertChildrenToData(children);\n\n    if (childData.length) {\n      data.children = childData;\n    }\n\n    return data;\n  }).filter(function (data) {\n    return data;\n  });\n}\nexport function fillLegacyProps(dataNode) {\n  if (!dataNode) {\n    return dataNode;\n  }\n\n  var cloneNode = _objectSpread({}, dataNode);\n\n  if (!('props' in cloneNode)) {\n    Object.defineProperty(cloneNode, 'props', {\n      get: function get() {\n        warning(false, 'New `rc-tree-select` not support return node instance as argument anymore. Please consider to remove `props` access.');\n        return cloneNode;\n      }\n    });\n  }\n\n  return cloneNode;\n}\nexport function fillAdditionalInfo(extra, triggerValue, checkedValues, treeData, showPosition, fieldNames) {\n  var triggerNode = null;\n  var nodeList = null;\n\n  function generateMap() {\n    function dig(list) {\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';\n      var parentIncluded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return list.map(function (option, index) {\n        var pos = \"\".concat(level, \"-\").concat(index);\n        var value = option[fieldNames.value];\n        var included = checkedValues.includes(value);\n        var children = dig(option[fieldNames.children] || [], pos, included);\n        var node = /*#__PURE__*/React.createElement(TreeNode, option, children.map(function (child) {\n          return child.node;\n        })); // Link with trigger node\n\n        if (triggerValue === value) {\n          triggerNode = node;\n        }\n\n        if (included) {\n          var checkedNode = {\n            pos: pos,\n            node: node,\n            children: children\n          };\n\n          if (!parentIncluded) {\n            nodeList.push(checkedNode);\n          }\n\n          return checkedNode;\n        }\n\n        return null;\n      }).filter(function (node) {\n        return node;\n      });\n    }\n\n    if (!nodeList) {\n      nodeList = [];\n      dig(treeData); // Sort to keep the checked node length\n\n      nodeList.sort(function (_ref, _ref2) {\n        var val1 = _ref.node.props.value;\n        var val2 = _ref2.node.props.value;\n        var index1 = checkedValues.indexOf(val1);\n        var index2 = checkedValues.indexOf(val2);\n        return index1 - index2;\n      });\n    }\n  }\n\n  Object.defineProperty(extra, 'triggerNode', {\n    get: function get() {\n      warning(false, '`triggerNode` is deprecated. Please consider decoupling data with node.');\n      generateMap();\n      return triggerNode;\n    }\n  });\n  Object.defineProperty(extra, 'allCheckedNodes', {\n    get: function get() {\n      warning(false, '`allCheckedNodes` is deprecated. Please consider decoupling data with node.');\n      generateMap();\n\n      if (showPosition) {\n        return nodeList;\n      }\n\n      return nodeList.map(function (_ref3) {\n        var node = _ref3.node;\n        return node;\n      });\n    }\n  });\n}","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { convertChildrenToData } from '../utils/legacyUtil';\n\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\n\n\nexport default function useTreeData(treeData, children, simpleMode) {\n  return React.useMemo(function () {\n    if (treeData) {\n      return simpleMode ? parseSimpleTreeData(treeData, _objectSpread({\n        id: 'id',\n        pId: 'pId',\n        rootPId: null\n      }, simpleMode !== true ? simpleMode : {})) : treeData;\n    }\n\n    return convertChildrenToData(children);\n  }, [children, simpleMode, treeData]);\n}","import * as React from 'react';\n/**\n * Same as `React.useCallback` but always return a memoized function\n * but redirect to real function.\n */\n\nexport default function useRefFunc(callback) {\n  var funcRef = React.useRef();\n  funcRef.current = callback;\n  var cacheFn = React.useCallback(function () {\n    return funcRef.current.apply(funcRef, arguments);\n  }, []);\n  return cacheFn;\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport warning from \"rc-util/es/warning\";\nimport { toArray } from './valueUtil';\n\nfunction warningProps(props) {\n  var searchPlaceholder = props.searchPlaceholder,\n      treeCheckStrictly = props.treeCheckStrictly,\n      treeCheckable = props.treeCheckable,\n      labelInValue = props.labelInValue,\n      value = props.value,\n      multiple = props.multiple;\n  warning(!searchPlaceholder, '`searchPlaceholder` has been removed.');\n\n  if (treeCheckStrictly && labelInValue === false) {\n    warning(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\n  }\n\n  if (labelInValue || treeCheckStrictly) {\n    warning(toArray(value).every(function (val) {\n      return val && _typeof(val) === 'object' && 'value' in val;\n    }), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\n  }\n\n  if (treeCheckStrictly || multiple || treeCheckable) {\n    warning(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\n  } else {\n    warning(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\n  }\n}\n\nexport default warningProps;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"id\", \"prefixCls\", \"value\", \"defaultValue\", \"onChange\", \"onSelect\", \"onDeselect\", \"searchValue\", \"inputValue\", \"onSearch\", \"autoClearSearchValue\", \"filterTreeNode\", \"treeNodeFilterProp\", \"showCheckedStrategy\", \"treeNodeLabelProp\", \"multiple\", \"treeCheckable\", \"treeCheckStrictly\", \"labelInValue\", \"fieldNames\", \"treeDataSimpleMode\", \"treeData\", \"children\", \"loadData\", \"treeLoadedKeys\", \"onTreeLoad\", \"treeDefaultExpandAll\", \"treeExpandedKeys\", \"treeDefaultExpandedKeys\", \"onTreeExpand\", \"treeExpandAction\", \"virtual\", \"listHeight\", \"listItemHeight\", \"onDropdownVisibleChange\", \"dropdownMatchSelectWidth\", \"treeLine\", \"treeIcon\", \"showTreeIcon\", \"switcherIcon\", \"treeMotion\"];\nimport * as React from 'react';\nimport { BaseSelect } from 'rc-select';\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport useId from \"rc-select/es/hooks/useId\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport OptionList from './OptionList';\nimport TreeNode from './TreeNode';\nimport { formatStrategyValues, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './utils/strategyUtil';\nimport TreeSelectContext from './TreeSelectContext';\nimport LegacyContext from './LegacyContext';\nimport useTreeData from './hooks/useTreeData';\nimport { toArray, fillFieldNames, isNil } from './utils/valueUtil';\nimport useCache from './hooks/useCache';\nimport useRefFunc from './hooks/useRefFunc';\nimport useDataEntities from './hooks/useDataEntities';\nimport { fillAdditionalInfo, fillLegacyProps } from './utils/legacyUtil';\nimport useCheckedKeys from './hooks/useCheckedKeys';\nimport useFilterTreeData from './hooks/useFilterTreeData';\nimport warningProps from './utils/warningPropsUtil';\nimport warning from \"rc-util/es/warning\";\n\nfunction isRawValue(value) {\n  return !value || _typeof(value) !== 'object';\n}\n\nvar TreeSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-tree-select' : _props$prefixCls,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect,\n      searchValue = props.searchValue,\n      inputValue = props.inputValue,\n      onSearch = props.onSearch,\n      _props$autoClearSearc = props.autoClearSearchValue,\n      autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n      filterTreeNode = props.filterTreeNode,\n      _props$treeNodeFilter = props.treeNodeFilterProp,\n      treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? SHOW_CHILD : _props$showCheckedStr,\n      treeNodeLabelProp = props.treeNodeLabelProp,\n      multiple = props.multiple,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue,\n      fieldNames = props.fieldNames,\n      treeDataSimpleMode = props.treeDataSimpleMode,\n      treeData = props.treeData,\n      children = props.children,\n      loadData = props.loadData,\n      treeLoadedKeys = props.treeLoadedKeys,\n      onTreeLoad = props.onTreeLoad,\n      treeDefaultExpandAll = props.treeDefaultExpandAll,\n      treeExpandedKeys = props.treeExpandedKeys,\n      treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n      onTreeExpand = props.onTreeExpand,\n      treeExpandAction = props.treeExpandAction,\n      virtual = props.virtual,\n      _props$listHeight = props.listHeight,\n      listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,\n      _props$listItemHeight = props.listItemHeight,\n      listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      _props$dropdownMatchS = props.dropdownMatchSelectWidth,\n      dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS,\n      treeLine = props.treeLine,\n      treeIcon = props.treeIcon,\n      showTreeIcon = props.showTreeIcon,\n      switcherIcon = props.switcherIcon,\n      treeMotion = props.treeMotion,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var mergedId = useId(id);\n  var treeConduction = treeCheckable && !treeCheckStrictly;\n  var mergedCheckable = treeCheckable || treeCheckStrictly;\n  var mergedLabelInValue = treeCheckStrictly || labelInValue;\n  var mergedMultiple = mergedCheckable || multiple; // ========================== Warning ===========================\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n  } // ========================= FieldNames =========================\n\n\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]); // =========================== Search ===========================\n\n  var _useMergedState = useMergedState('', {\n    value: searchValue !== undefined ? searchValue : inputValue,\n    postState: function postState(search) {\n      return search || '';\n    }\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSearchValue = _useMergedState2[0],\n      setSearchValue = _useMergedState2[1];\n\n  var onInternalSearch = function onInternalSearch(searchText) {\n    setSearchValue(searchText);\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);\n  }; // ============================ Data ============================\n  // `useTreeData` only do convert of `children` or `simpleMode`.\n  // Else will return origin `treeData` for perf consideration.\n  // Do not do anything to loop the data.\n\n\n  var mergedTreeData = useTreeData(treeData, children, treeDataSimpleMode);\n\n  var _useDataEntities = useDataEntities(mergedTreeData, mergedFieldNames),\n      keyEntities = _useDataEntities.keyEntities,\n      valueEntities = _useDataEntities.valueEntities;\n  /** Get `missingRawValues` which not exist in the tree yet */\n\n\n  var splitRawValues = React.useCallback(function (newRawValues) {\n    var missingRawValues = [];\n    var existRawValues = []; // Keep missing value in the cache\n\n    newRawValues.forEach(function (val) {\n      if (valueEntities.has(val)) {\n        existRawValues.push(val);\n      } else {\n        missingRawValues.push(val);\n      }\n    });\n    return {\n      missingRawValues: missingRawValues,\n      existRawValues: existRawValues\n    };\n  }, [valueEntities]); // Filtered Tree\n\n  var filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {\n    fieldNames: mergedFieldNames,\n    treeNodeFilterProp: treeNodeFilterProp,\n    filterTreeNode: filterTreeNode\n  }); // =========================== Label ============================\n\n  var getLabel = React.useCallback(function (item) {\n    if (item) {\n      if (treeNodeLabelProp) {\n        return item[treeNodeLabelProp];\n      } // Loop from fieldNames\n\n\n      var titleList = mergedFieldNames._title;\n\n      for (var i = 0; i < titleList.length; i += 1) {\n        var title = item[titleList[i]];\n\n        if (title !== undefined) {\n          return title;\n        }\n      }\n    }\n  }, [mergedFieldNames, treeNodeLabelProp]); // ========================= Wrap Value =========================\n\n  var toLabeledValues = React.useCallback(function (draftValues) {\n    var values = toArray(draftValues);\n    return values.map(function (val) {\n      if (isRawValue(val)) {\n        return {\n          value: val\n        };\n      }\n\n      return val;\n    });\n  }, []);\n  var convert2LabelValues = React.useCallback(function (draftValues) {\n    var values = toLabeledValues(draftValues);\n    return values.map(function (item) {\n      var rawLabel = item.label;\n      var rawValue = item.value,\n          rawHalfChecked = item.halfChecked;\n      var rawDisabled;\n      var entity = valueEntities.get(rawValue); // Fill missing label & status\n\n      if (entity) {\n        var _rawLabel;\n\n        rawLabel = (_rawLabel = rawLabel) !== null && _rawLabel !== void 0 ? _rawLabel : getLabel(entity.node);\n        rawDisabled = entity.node.disabled;\n      }\n\n      return {\n        label: rawLabel,\n        value: rawValue,\n        halfChecked: rawHalfChecked,\n        disabled: rawDisabled\n      };\n    });\n  }, [valueEntities, getLabel, toLabeledValues]); // =========================== Values ===========================\n\n  var _useMergedState3 = useMergedState(defaultValue, {\n    value: value\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      internalValue = _useMergedState4[0],\n      setInternalValue = _useMergedState4[1];\n\n  var rawMixedLabeledValues = React.useMemo(function () {\n    return toLabeledValues(internalValue);\n  }, [toLabeledValues, internalValue]); // Split value into full check and half check\n\n  var _React$useMemo = React.useMemo(function () {\n    var fullCheckValues = [];\n    var halfCheckValues = [];\n    rawMixedLabeledValues.forEach(function (item) {\n      if (item.halfChecked) {\n        halfCheckValues.push(item);\n      } else {\n        fullCheckValues.push(item);\n      }\n    });\n    return [fullCheckValues, halfCheckValues];\n  }, [rawMixedLabeledValues]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      rawLabeledValues = _React$useMemo2[0],\n      rawHalfLabeledValues = _React$useMemo2[1]; // const [mergedValues] = useCache(rawLabeledValues);\n\n\n  var rawValues = React.useMemo(function () {\n    return rawLabeledValues.map(function (item) {\n      return item.value;\n    });\n  }, [rawLabeledValues]); // Convert value to key. Will fill missed keys for conduct check.\n\n  var _useCheckedKeys = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities),\n      _useCheckedKeys2 = _slicedToArray(_useCheckedKeys, 2),\n      rawCheckedValues = _useCheckedKeys2[0],\n      rawHalfCheckedValues = _useCheckedKeys2[1]; // Convert rawCheckedKeys to check strategy related values\n\n\n  var displayValues = React.useMemo(function () {\n    // Collect keys which need to show\n    var displayKeys = formatStrategyValues(rawCheckedValues, showCheckedStrategy, keyEntities, mergedFieldNames); // Convert to value and filled with label\n\n    var values = displayKeys.map(function (key) {\n      var _keyEntities$key$node, _keyEntities$key, _keyEntities$key$node2;\n\n      return (_keyEntities$key$node = (_keyEntities$key = keyEntities[key]) === null || _keyEntities$key === void 0 ? void 0 : (_keyEntities$key$node2 = _keyEntities$key.node) === null || _keyEntities$key$node2 === void 0 ? void 0 : _keyEntities$key$node2[mergedFieldNames.value]) !== null && _keyEntities$key$node !== void 0 ? _keyEntities$key$node : key;\n    }); // Back fill with origin label\n\n    var labeledValues = values.map(function (val) {\n      var targetItem = rawLabeledValues.find(function (item) {\n        return item.value === val;\n      });\n      return {\n        value: val,\n        label: targetItem === null || targetItem === void 0 ? void 0 : targetItem.label\n      };\n    });\n    var rawDisplayValues = convert2LabelValues(labeledValues);\n    var firstVal = rawDisplayValues[0];\n\n    if (!mergedMultiple && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {\n      return [];\n    }\n\n    return rawDisplayValues.map(function (item) {\n      var _item$label;\n\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value\n      });\n    });\n  }, [mergedFieldNames, mergedMultiple, rawCheckedValues, rawLabeledValues, convert2LabelValues, showCheckedStrategy, keyEntities]);\n\n  var _useCache = useCache(displayValues),\n      _useCache2 = _slicedToArray(_useCache, 1),\n      cachedDisplayValues = _useCache2[0]; // =========================== Change ===========================\n\n\n  var triggerChange = useRefFunc(function (newRawValues, extra, source) {\n    var labeledValues = convert2LabelValues(newRawValues);\n    setInternalValue(labeledValues); // Clean up if needed\n\n    if (autoClearSearchValue) {\n      setSearchValue('');\n    } // Generate rest parameters is costly, so only do it when necessary\n\n\n    if (onChange) {\n      var eventValues = newRawValues;\n\n      if (treeConduction) {\n        var formattedKeyList = formatStrategyValues(newRawValues, showCheckedStrategy, keyEntities, mergedFieldNames);\n        eventValues = formattedKeyList.map(function (key) {\n          var entity = valueEntities.get(key);\n          return entity ? entity.node[mergedFieldNames.value] : key;\n        });\n      }\n\n      var _ref = extra || {\n        triggerValue: undefined,\n        selected: undefined\n      },\n          triggerValue = _ref.triggerValue,\n          selected = _ref.selected;\n\n      var returnRawValues = eventValues; // We need fill half check back\n\n      if (treeCheckStrictly) {\n        var halfValues = rawHalfLabeledValues.filter(function (item) {\n          return !eventValues.includes(item.value);\n        });\n        returnRawValues = [].concat(_toConsumableArray(returnRawValues), _toConsumableArray(halfValues));\n      }\n\n      var returnLabeledValues = convert2LabelValues(returnRawValues);\n      var additionalInfo = {\n        // [Legacy] Always return as array contains label & value\n        preValue: rawLabeledValues,\n        triggerValue: triggerValue\n      }; // [Legacy] Fill legacy data if user query.\n      // This is expansive that we only fill when user query\n      // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n      var showPosition = true;\n\n      if (treeCheckStrictly || source === 'selection' && !selected) {\n        showPosition = false;\n      }\n\n      fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition, mergedFieldNames);\n\n      if (mergedCheckable) {\n        additionalInfo.checked = selected;\n      } else {\n        additionalInfo.selected = selected;\n      }\n\n      var returnValues = mergedLabelInValue ? returnLabeledValues : returnLabeledValues.map(function (item) {\n        return item.value;\n      });\n      onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : returnLabeledValues.map(function (item) {\n        return item.label;\n      }), additionalInfo);\n    }\n  }); // ========================== Options ===========================\n\n  /** Trigger by option list */\n\n  var onOptionSelect = React.useCallback(function (selectedKey, _ref2) {\n    var _node$mergedFieldName;\n\n    var selected = _ref2.selected,\n        source = _ref2.source;\n    var entity = keyEntities[selectedKey];\n    var node = entity === null || entity === void 0 ? void 0 : entity.node;\n    var selectedValue = (_node$mergedFieldName = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value]) !== null && _node$mergedFieldName !== void 0 ? _node$mergedFieldName : selectedKey; // Never be falsy but keep it safe\n\n    if (!mergedMultiple) {\n      // Single mode always set value\n      triggerChange([selectedValue], {\n        selected: true,\n        triggerValue: selectedValue\n      }, 'option');\n    } else {\n      var newRawValues = selected ? [].concat(_toConsumableArray(rawValues), [selectedValue]) : rawCheckedValues.filter(function (v) {\n        return v !== selectedValue;\n      }); // Add keys if tree conduction\n\n      if (treeConduction) {\n        // Should keep missing values\n        var _splitRawValues = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues.missingRawValues,\n            existRawValues = _splitRawValues.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return valueEntities.get(val).key;\n        }); // Conduction by selected or not\n\n        var checkedKeys;\n\n        if (selected) {\n          var _conductCheck = conductCheck(keyList, true, keyEntities);\n\n          checkedKeys = _conductCheck.checkedKeys;\n        } else {\n          var _conductCheck2 = conductCheck(keyList, {\n            checked: false,\n            halfCheckedKeys: rawHalfCheckedValues\n          }, keyEntities);\n\n          checkedKeys = _conductCheck2.checkedKeys;\n        } // Fill back of keys\n\n\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return keyEntities[key].node[mergedFieldNames.value];\n        })));\n      }\n\n      triggerChange(newRawValues, {\n        selected: selected,\n        triggerValue: selectedValue\n      }, source || 'option');\n    } // Trigger select event\n\n\n    if (selected || !mergedMultiple) {\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(selectedValue, fillLegacyProps(node));\n    } else {\n      onDeselect === null || onDeselect === void 0 ? void 0 : onDeselect(selectedValue, fillLegacyProps(node));\n    }\n  }, [splitRawValues, valueEntities, keyEntities, mergedFieldNames, mergedMultiple, rawValues, triggerChange, treeConduction, onSelect, onDeselect, rawCheckedValues, rawHalfCheckedValues]); // ========================== Dropdown ==========================\n\n  var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n    if (onDropdownVisibleChange) {\n      var legacyParam = {};\n      Object.defineProperty(legacyParam, 'documentClickClose', {\n        get: function get() {\n          warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n          return false;\n        }\n      });\n      onDropdownVisibleChange(open, legacyParam);\n    }\n  }, [onDropdownVisibleChange]); // ====================== Display Change ========================\n\n  var onDisplayValuesChange = useRefFunc(function (newValues, info) {\n    var newRawValues = newValues.map(function (item) {\n      return item.value;\n    });\n\n    if (info.type === 'clear') {\n      triggerChange(newRawValues, {}, 'selection');\n      return;\n    } // TreeSelect only have multiple mode which means display change only has remove\n\n\n    if (info.values.length) {\n      onOptionSelect(info.values[0].value, {\n        selected: false,\n        source: 'selection'\n      });\n    }\n  }); // ========================== Context ===========================\n\n  var treeSelectContext = React.useMemo(function () {\n    return {\n      virtual: virtual,\n      dropdownMatchSelectWidth: dropdownMatchSelectWidth,\n      listHeight: listHeight,\n      listItemHeight: listItemHeight,\n      treeData: filteredTreeData,\n      fieldNames: mergedFieldNames,\n      onSelect: onOptionSelect,\n      treeExpandAction: treeExpandAction\n    };\n  }, [virtual, dropdownMatchSelectWidth, listHeight, listItemHeight, filteredTreeData, mergedFieldNames, onOptionSelect, treeExpandAction]); // ======================= Legacy Context =======================\n\n  var legacyContext = React.useMemo(function () {\n    return {\n      checkable: mergedCheckable,\n      loadData: loadData,\n      treeLoadedKeys: treeLoadedKeys,\n      onTreeLoad: onTreeLoad,\n      checkedKeys: rawCheckedValues,\n      halfCheckedKeys: rawHalfCheckedValues,\n      treeDefaultExpandAll: treeDefaultExpandAll,\n      treeExpandedKeys: treeExpandedKeys,\n      treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n      onTreeExpand: onTreeExpand,\n      treeIcon: treeIcon,\n      treeMotion: treeMotion,\n      showTreeIcon: showTreeIcon,\n      switcherIcon: switcherIcon,\n      treeLine: treeLine,\n      treeNodeFilterProp: treeNodeFilterProp,\n      keyEntities: keyEntities\n    };\n  }, [mergedCheckable, loadData, treeLoadedKeys, onTreeLoad, rawCheckedValues, rawHalfCheckedValues, treeDefaultExpandAll, treeExpandedKeys, treeDefaultExpandedKeys, onTreeExpand, treeIcon, treeMotion, showTreeIcon, switcherIcon, treeLine, treeNodeFilterProp, keyEntities]); // =========================== Render ===========================\n\n  return /*#__PURE__*/React.createElement(TreeSelectContext.Provider, {\n    value: treeSelectContext\n  }, /*#__PURE__*/React.createElement(LegacyContext.Provider, {\n    value: legacyContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({\n    ref: ref\n  }, restProps, {\n    // >>> MISC\n    id: mergedId,\n    prefixCls: prefixCls,\n    mode: mergedMultiple ? 'multiple' : undefined // >>> Display Value\n    ,\n    displayValues: cachedDisplayValues,\n    onDisplayValuesChange: onDisplayValuesChange // >>> Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch // >>> Options\n    ,\n    OptionList: OptionList,\n    emptyOptions: !mergedTreeData.length,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth\n  }))));\n}); // Assign name for Debug\n\nif (process.env.NODE_ENV !== 'production') {\n  TreeSelect.displayName = 'TreeSelect';\n}\n\nvar GenericTreeSelect = TreeSelect;\nGenericTreeSelect.TreeNode = TreeNode;\nGenericTreeSelect.SHOW_ALL = SHOW_ALL;\nGenericTreeSelect.SHOW_PARENT = SHOW_PARENT;\nGenericTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport default GenericTreeSelect;","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport warning from \"rc-util/es/warning\";\nimport { isNil } from '../utils/valueUtil';\nexport default (function (treeData, fieldNames) {\n  return React.useMemo(function () {\n    var collection = convertDataToEntities(treeData, {\n      fieldNames: fieldNames,\n      initWrapper: function initWrapper(wrapper) {\n        return _objectSpread(_objectSpread({}, wrapper), {}, {\n          valueEntities: new Map()\n        });\n      },\n      processEntity: function processEntity(entity, wrapper) {\n        var val = entity.node[fieldNames.value]; // Check if exist same value\n\n        if (process.env.NODE_ENV !== 'production') {\n          var key = entity.node.key;\n          warning(!isNil(val), 'TreeNode `value` is invalidate: undefined');\n          warning(!wrapper.valueEntities.has(val), \"Same `value` exist in the tree: \".concat(val));\n          warning(!key || String(key) === String(val), \"`key` or `value` with TreeNode must be the same or you can remove one of them. key: \".concat(key, \", value: \").concat(val, \".\"));\n        }\n\n        wrapper.valueEntities.set(val, entity);\n      }\n    });\n    return collection;\n  }, [treeData, fieldNames]);\n});","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { fillLegacyProps } from '../utils/legacyUtil';\nexport default (function (treeData, searchValue, _ref) {\n  var treeNodeFilterProp = _ref.treeNodeFilterProp,\n      filterTreeNode = _ref.filterTreeNode,\n      fieldNames = _ref.fieldNames;\n  var fieldChildren = fieldNames.children;\n  return React.useMemo(function () {\n    if (!searchValue || filterTreeNode === false) {\n      return treeData;\n    }\n\n    var filterOptionFunc;\n\n    if (typeof filterTreeNode === 'function') {\n      filterOptionFunc = filterTreeNode;\n    } else {\n      var upperStr = searchValue.toUpperCase();\n\n      filterOptionFunc = function filterOptionFunc(_, dataNode) {\n        var value = dataNode[treeNodeFilterProp];\n        return String(value).toUpperCase().includes(upperStr);\n      };\n    }\n\n    function dig(list) {\n      var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return list.map(function (dataNode) {\n        var children = dataNode[fieldChildren];\n        var match = keepAll || filterOptionFunc(searchValue, fillLegacyProps(dataNode));\n        var childList = dig(children || [], match);\n\n        if (match || childList.length) {\n          return _objectSpread(_objectSpread({}, dataNode), {}, _defineProperty({\n            isLeaf: undefined\n          }, fieldChildren, childList));\n        }\n\n        return null;\n      }).filter(function (node) {\n        return node;\n      });\n    }\n\n    return dig(treeData);\n  }, [treeData, searchValue, fieldChildren, treeNodeFilterProp, filterTreeNode]);\n});","import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nexport default (function (rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities) {\n  return React.useMemo(function () {\n    var checkedKeys = rawLabeledValues.map(function (_ref) {\n      var value = _ref.value;\n      return value;\n    });\n    var halfCheckedKeys = rawHalfCheckedValues.map(function (_ref2) {\n      var value = _ref2.value;\n      return value;\n    });\n    var missingValues = checkedKeys.filter(function (key) {\n      return !keyEntities[key];\n    });\n\n    if (treeConduction) {\n      var _conductCheck = conductCheck(checkedKeys, true, keyEntities);\n\n      checkedKeys = _conductCheck.checkedKeys;\n      halfCheckedKeys = _conductCheck.halfCheckedKeys;\n    }\n\n    return [// Checked keys should fill with missing keys which should de-duplicated\n    Array.from(new Set([].concat(_toConsumableArray(missingValues), _toConsumableArray(checkedKeys)))), // Half checked keys\n    halfCheckedKeys];\n  }, [rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities]);\n});","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\n/**\n * This function will try to call requestIdleCallback if available to save performance.\n * No need `getLabel` here since already fetch on `rawLabeledValue`.\n */\n\nexport default (function (values) {\n  var cacheRef = React.useRef({\n    valueLabels: new Map()\n  });\n  return React.useMemo(function () {\n    var valueLabels = cacheRef.current.valueLabels;\n    var valueLabelsCache = new Map();\n    var filledValues = values.map(function (item) {\n      var _item$label;\n\n      var value = item.value;\n      var mergedLabel = (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : valueLabels.get(value); // Save in cache\n\n      valueLabelsCache.set(value, mergedLabel);\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: mergedLabel\n      });\n    });\n    cacheRef.current.valueLabels = valueLabelsCache;\n    return [filledValues];\n  }, [values]);\n});","import TreeSelect from './TreeSelect';\nimport TreeNode from './TreeNode';\nimport { SHOW_ALL, SHOW_CHILD, SHOW_PARENT } from './utils/strategyUtil';\nexport { TreeNode, SHOW_ALL, SHOW_CHILD, SHOW_PARENT };\nexport default TreeSelect;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport classNames from 'classnames';\nimport RcTreeSelect, { SHOW_ALL, SHOW_CHILD, SHOW_PARENT, TreeNode } from 'rc-tree-select';\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { ConfigContext } from '../config-provider';\nimport defaultRenderEmpty from '../config-provider/defaultRenderEmpty';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport SizeContext from '../config-provider/SizeContext';\nimport { FormItemInputContext } from '../form/context';\nimport getIcons from '../select/utils/iconUtil';\nimport renderSwitcherIcon from '../tree/utils/iconUtil';\nimport { getTransitionDirection, getTransitionName } from '../_util/motion';\nimport { getMergedStatus, getStatusClassNames } from '../_util/statusUtils';\nimport warning from '../_util/warning';\n\nvar InternalTreeSelect = function InternalTreeSelect(_a, ref) {\n  var _classNames2;\n\n  var customizePrefixCls = _a.prefixCls,\n      customizeSize = _a.size,\n      customDisabled = _a.disabled,\n      _a$bordered = _a.bordered,\n      bordered = _a$bordered === void 0 ? true : _a$bordered,\n      className = _a.className,\n      treeCheckable = _a.treeCheckable,\n      multiple = _a.multiple,\n      _a$listHeight = _a.listHeight,\n      listHeight = _a$listHeight === void 0 ? 256 : _a$listHeight,\n      _a$listItemHeight = _a.listItemHeight,\n      listItemHeight = _a$listItemHeight === void 0 ? 26 : _a$listItemHeight,\n      placement = _a.placement,\n      notFoundContent = _a.notFoundContent,\n      _switcherIcon = _a.switcherIcon,\n      treeLine = _a.treeLine,\n      getPopupContainer = _a.getPopupContainer,\n      dropdownClassName = _a.dropdownClassName,\n      popupClassName = _a.popupClassName,\n      _a$treeIcon = _a.treeIcon,\n      treeIcon = _a$treeIcon === void 0 ? false : _a$treeIcon,\n      transitionName = _a.transitionName,\n      _a$choiceTransitionNa = _a.choiceTransitionName,\n      choiceTransitionName = _a$choiceTransitionNa === void 0 ? '' : _a$choiceTransitionNa,\n      customStatus = _a.status,\n      showArrow = _a.showArrow,\n      treeExpandAction = _a.treeExpandAction,\n      props = __rest(_a, [\"prefixCls\", \"size\", \"disabled\", \"bordered\", \"className\", \"treeCheckable\", \"multiple\", \"listHeight\", \"listItemHeight\", \"placement\", \"notFoundContent\", \"switcherIcon\", \"treeLine\", \"getPopupContainer\", \"dropdownClassName\", \"popupClassName\", \"treeIcon\", \"transitionName\", \"choiceTransitionName\", \"status\", \"showArrow\", \"treeExpandAction\"]);\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getContextPopupContainer = _React$useContext.getPopupContainer,\n      getPrefixCls = _React$useContext.getPrefixCls,\n      renderEmpty = _React$useContext.renderEmpty,\n      direction = _React$useContext.direction,\n      virtual = _React$useContext.virtual,\n      dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth;\n\n  var size = React.useContext(SizeContext);\n  process.env.NODE_ENV !== \"production\" ? warning(multiple !== false || !treeCheckable, 'TreeSelect', '`multiple` will always be `true` when `treeCheckable` is true') : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!dropdownClassName, 'TreeSelect', '`dropdownClassName` is deprecated which will be removed in next major version. Please use `popupClassName` instead.') : void 0;\n  var prefixCls = getPrefixCls('select', customizePrefixCls);\n  var treePrefixCls = getPrefixCls('select-tree', customizePrefixCls);\n  var treeSelectPrefixCls = getPrefixCls('tree-select', customizePrefixCls);\n  var mergedDropdownClassName = classNames(popupClassName || dropdownClassName, \"\".concat(treeSelectPrefixCls, \"-dropdown\"), _defineProperty({}, \"\".concat(treeSelectPrefixCls, \"-dropdown-rtl\"), direction === 'rtl'));\n  var isMultiple = !!(treeCheckable || multiple);\n  var mergedShowArrow = showArrow !== undefined ? showArrow : props.loading || !isMultiple; // ===================== Form =====================\n\n  var _useContext = useContext(FormItemInputContext),\n      contextStatus = _useContext.status,\n      hasFeedback = _useContext.hasFeedback,\n      isFormItemInput = _useContext.isFormItemInput,\n      feedbackIcon = _useContext.feedbackIcon;\n\n  var mergedStatus = getMergedStatus(contextStatus, customStatus); // ===================== Icons =====================\n\n  var _getIcons = getIcons(_extends(_extends({}, props), {\n    multiple: isMultiple,\n    showArrow: mergedShowArrow,\n    hasFeedback: hasFeedback,\n    feedbackIcon: feedbackIcon,\n    prefixCls: prefixCls\n  })),\n      suffixIcon = _getIcons.suffixIcon,\n      removeIcon = _getIcons.removeIcon,\n      clearIcon = _getIcons.clearIcon; // ===================== Empty =====================\n\n\n  var mergedNotFound;\n\n  if (notFoundContent !== undefined) {\n    mergedNotFound = notFoundContent;\n  } else {\n    mergedNotFound = (renderEmpty || defaultRenderEmpty)('Select');\n  } // ==================== Render =====================\n\n\n  var selectProps = omit(props, ['suffixIcon', 'itemIcon', 'removeIcon', 'clearIcon', 'switcherIcon']); // ===================== Placement =====================\n\n  var getPlacement = function getPlacement() {\n    if (placement !== undefined) {\n      return placement;\n    }\n\n    return direction === 'rtl' ? 'bottomRight' : 'bottomLeft';\n  };\n\n  var mergedSize = customizeSize || size; // ===================== Disabled =====================\n\n  var disabled = React.useContext(DisabledContext);\n  var mergedDisabled = customDisabled || disabled;\n  var mergedClassName = classNames(!customizePrefixCls && treeSelectPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-lg\"), mergedSize === 'large'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-sm\"), mergedSize === 'small'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-borderless\"), !bordered), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-in-form-item\"), isFormItemInput), _classNames2), getStatusClassNames(prefixCls, mergedStatus, hasFeedback), className);\n  var rootPrefixCls = getPrefixCls();\n  return /*#__PURE__*/React.createElement(RcTreeSelect, _extends({\n    virtual: virtual,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth,\n    disabled: mergedDisabled\n  }, selectProps, {\n    ref: ref,\n    prefixCls: prefixCls,\n    className: mergedClassName,\n    listHeight: listHeight,\n    listItemHeight: listItemHeight,\n    treeCheckable: treeCheckable ? /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-tree-checkbox-inner\")\n    }) : treeCheckable,\n    treeLine: !!treeLine,\n    inputIcon: suffixIcon,\n    multiple: multiple,\n    placement: getPlacement(),\n    removeIcon: removeIcon,\n    clearIcon: clearIcon,\n    switcherIcon: function switcherIcon(nodeProps) {\n      return renderSwitcherIcon(treePrefixCls, _switcherIcon, treeLine, nodeProps);\n    },\n    showTreeIcon: treeIcon,\n    notFoundContent: mergedNotFound,\n    getPopupContainer: getPopupContainer || getContextPopupContainer,\n    treeMotion: null,\n    dropdownClassName: mergedDropdownClassName,\n    choiceTransitionName: getTransitionName(rootPrefixCls, '', choiceTransitionName),\n    transitionName: getTransitionName(rootPrefixCls, getTransitionDirection(placement), transitionName),\n    showArrow: hasFeedback || showArrow,\n    treeExpandAction: treeExpandAction\n  }));\n};\n\nvar TreeSelectRef = /*#__PURE__*/React.forwardRef(InternalTreeSelect);\nvar TreeSelect = TreeSelectRef;\nTreeSelect.TreeNode = TreeNode;\nTreeSelect.SHOW_ALL = SHOW_ALL;\nTreeSelect.SHOW_PARENT = SHOW_PARENT;\nTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport { TreeNode };\nexport default TreeSelect;"],"sourceRoot":""}